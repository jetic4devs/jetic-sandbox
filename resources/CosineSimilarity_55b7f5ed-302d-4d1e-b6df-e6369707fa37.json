{
  "type" : "SOURCE_DEFINITIONS",
  "properties" : {
    "content" : "import org.apache.camel.builder.RouteBuilder;\nimport java.util.*;\n\npublic class CosineSimilarity extends RouteBuilder\n{\n    @Override\n    public void configure() {\n        getContext().getRegistry().bind(\"WordSimilarity\", new WordSimilarity());   \n    }\n\t\n    public class Values\n    {\n        int val1;\n        int val2;\n        public Values(int v1, int v2)\n        {\n            this.val1=v1;\n            this.val2=v2;\n        }\n\n        public void updateValue(int v1, int v2)\n        {\n            this.val1=v1;\n            this.val2=v2;\n        }\n    }\n\n    public class WordSimilarity \n    {\n        public double score(String text1, String text2)\n        {\n\t\t\t\t    System.out.println(\"Original text \"+text1+\" reverse original text \"+text2);\n\t\t\t\t\t\tif(text1 == null || text2 == null){\n\t\t\t\t\t\t\treturn 0.0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry{\n            //1. Identify distinct words from both documents\n            String [] wordSeqText1 = text1.split(\" \");\n            String [] wordSeqText2 = text2.split(\" \");\n            Hashtable<String, Values> wordFreqVector = new Hashtable<String, CosineSimilarity.Values>();\n            LinkedList<String> distinctWordsText_1_2 = new LinkedList<String>();\n\n            //prepare word frequency vector by using Text1\n            for(String word: wordSeqText1)\n            {\n                String tmpWord = word.trim();\n                if(tmpWord.length()>0)\n                {\n                    if(wordFreqVector.containsKey(tmpWord))\n                    {\n                        Values vals1 = wordFreqVector.get(tmpWord);\n                        int freq1 = vals1.val1+1;\n                        int freq2 = vals1.val2;\n                        vals1.updateValue(freq1, freq2);\n                        wordFreqVector.put(tmpWord, vals1);\n                    }\n                    else\n                    {\n                        wordFreqVector.put(tmpWord, new Values(1, 0));\n                        distinctWordsText_1_2.add(tmpWord);\n                    }\n                }\n            }\n\n            //prepare word frequency vector by using Text2\n            for(String word: wordSeqText2)\n            {\n                String tmpWord = word.trim();\n                if(tmpWord.length()>0)\n                {\n                    if(wordFreqVector.containsKey(tmpWord))\n                    {\n                        Values vals1 = wordFreqVector.get(tmpWord);\n                        int freq1 = vals1.val1;\n                        int freq2 = vals1.val2+1;\n                        vals1.updateValue(freq1, freq2);\n                        wordFreqVector.put(tmpWord, vals1);\n                    }\n                    else\n                    {\n                        wordFreqVector.put(tmpWord, new Values(0, 1));\n                        distinctWordsText_1_2.add(tmpWord);\n                    }\n                }\n            }\n\n            //calculate the cosine similarity score.\n            double vectorAB = 0.0000000;\n            double vectorASeq = 0.0000000;\n            double vectorBSeq = 0.0000000;\n\n            for(String text: distinctWordsText_1_2)\n            {\n                Values vals12 = wordFreqVector.get(text);\n\n                double freq1 = (double)vals12.val1;\n                double freq2 = (double)vals12.val2;\n                \n                vectorAB=vectorAB+(freq1*freq2);\n\n                vectorASeq = vectorASeq + freq1*freq1;\n                vectorBSeq = vectorBSeq + freq2*freq2;\n            }\n\n            System.out.println(\"VectAB \"+vectorAB+\" VectA_Sq \"+vectorASeq+\" VectB_Sq \"+vectorBSeq);\n            return ((vectorAB)/(Math.sqrt(vectorASeq)*Math.sqrt(vectorBSeq)));\n\n            }catch(Exception ex){\n\t\t\t\t\t\t\tex.printStackTrace();\n\t\t\t\t\t\t\treturn 0.0;\n\t\t\t\t\t\t}\n        }\n\n    }\n}",
    "filename" : "CosineSimilarity.java"
  },
  "id" : "55b7f5ed-302d-4d1e-b6df-e6369707fa37",
  "name" : "CosineSimilarity",
  "description" : "",
  "createdAt" : "2023-10-04T18:05:23.89760389",
  "updatedAt" : "2023-10-04T18:05:23.897604926",
  "createdBy" : "612c1b37-217d-49f9-b344-54b8af760f6a",
  "updatedBy" : "612c1b37-217d-49f9-b344-54b8af760f6a"
}