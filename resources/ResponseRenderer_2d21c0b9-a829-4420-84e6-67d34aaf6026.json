{
  "type" : "BEANS",
  "properties" : {
    "codeGroovy" : "beans {\n    myString = 'Hello World!'\n\n    myProcessor = processor { \n        it.in.body = 'Hello from Groovy'\n    }\n\n    myPredicate = predicate {\n        it.in.body != null\n    }\n}",
    "codeJava" : "@BindToRegistry\npublic Processor renderResponse() {\n    return exchange -> {\n\n        CamelContext context = exchange.getContext();\n        ProducerTemplate t = context.createProducerTemplate();\n\n        String body, responseObject;\n        ObjectMapper mapper = new ObjectMapper();\n\n        Map<String, Object> headers = (Map)exchange.getIn().getHeaders();\n        String operationId = (String)exchange.getProperty(\"x-operation-id\");\n        if (operationId == null && headers.get(\"x-operation-id\") != null)\n            operationId = (String)headers.get(\"x-operation-id\");\n\n        headers.put(\"x-request-id\", (String)exchange.getExchangeId());\n        exchange.setProperty(\"x-request-id\", (String)exchange.getExchangeId());\n        headers.put(\"x-operation-id\", operationId);\n        headers.put(\"Content-Type\", \"application/json\");\n\n        if (exchange.getProperty(\"CamelHttpResponseCode\") != null)\n            headers.put(\"CamelHttpResponseCode\", String.valueOf(exchange.getProperty(\"CamelHttpResponseCode\")));\n\n        URL specURL;\n        OpenApi3 openApi;\n        OAI3Context oai3Context;\n        try {\n            specURL = exchange.getContext().getClassResolver().loadResourceAsURL(\"yakrcl-openapi.json\");\n            openApi = new OpenApi3Parser().parse(specURL, false);\n            oai3Context = new OAI3Context(specURL);\n        } catch (Exception e) {\n            System.out.format(\"Error parsing API contract for response: %s\", e);\n            return;\n        }\n\n        if (exchange.getProperty(\"error\") != null || exchange.getProperty(\"errors\") != null) {\n            if (headers.get(\"CamelHttpResponseCode\") == null || !String.valueOf(headers.get(\"CamelHttpResponseCode\")).startsWith(\"4\"))\n                headers.put(\"CamelHttpResponseCode\", 400);\n\n            if (exchange.getProperty(\"error\") != null) {\n\n                HashMap<String, String> errorResp = new HashMap<String, String>() {{\n                    put(\"error\", String.valueOf(exchange.getProperty(\"error\")));\n                }};\n\n                body = mapper.writeValueAsString(errorResp);\n            } else\n                body = (String)exchange.getProperty(\"errors\");\n\n        }\n        else {\n\t\t\t\t\t/*\n            if (exchange.getIn().getBody() instanceof ArrayList) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tOptional<Object> result = Stream.of((ArrayList)exchange.getIn().getBody())\n\t\t\t\t\t\t\t\t.filter(list -> !list.isEmpty())\n    \t\t\t\t\t\t.map(list -> list.get(0));\n\n\t\t\t\t\t\t\tif (result.isPresent()) {\n    \t\t\t\t\t\t//Object total = result.get(); \n\t\t\t\t\t\t\t\tSystem.out.println(\"Found element\");\n    \t\t\t\t\t\tSystem.out.println(mapper.writeValueAsString(result.get()));\n\t\t\t\t\t\t\t} \t\t\t\t\t\n\t\t\t\t\t\t\t\n            }\n\t\t\t\t\t\t*/\n\t\t\t\t\t\n            body = mapper.writeValueAsString(exchange.getIn().getBody());\n\n            if (headers.get(\"CamelHttpResponseCode\") == null)\n                headers.put(\"CamelHttpResponseCode\", 200);\n        }\n\n\t\t\t\tif (body != null && !body.isEmpty() && !String.valueOf(headers.get(\"CamelHttpResponseCode\")).equals(\"204\")) {\n\t        try {\n  \t          Operation operation = openApi.getOperationById(operationId);\n    \t        Schema schema = operation.getResponse(String.valueOf(headers.get(\"CamelHttpResponseCode\"))).getContentMediaType(\"application/json\").getSchema();\n      \t      String[] objectRef = schema.getReference(oai3Context).getRef().split(\"/\");\n        \t    headers.put(\"x-response-key\", objectRef[objectRef.length-1]);\n        \t} catch (Exception e) {\n          \t  System.out.println(\"Failed to find openAPI response key for \" + operationId + \" HTTP\" + String.valueOf(headers.get(\"CamelHttpResponseCode\")));\n\t            headers.put(\"x-response-key\", \"Error\");\n  \t      }\n\t\t\t\t\t\n  \t      Endpoint endpoint = context.getEndpoint(\"velocity:openapi.response.json.vm?allowContextMapAll=true\");\n\t        Object response = t.sendBodyAndHeaders(endpoint, ExchangePattern.InOut, body, headers);\t\t\t\t\t\n\t\t\t\t\texchange.getIn().setBody(response);\n\t\t\t\t}\n\n        exchange.getIn().setHeaders(headers);\n        exchange.getIn().removeHeaders(\"*\", \"x-*\", \"CamelHttpResponseCode\", \"Content-Type\", \"access-control-allow-origin\", \"access-control-allow-headers\", \"access-control-allow-methods\", \"access-control-request-headers\");\n        exchange.getIn().removeHeader(\"x-response-key\");\n        exchange.getIn().removeHeader(\"x-operation-id\");\n        exchange.getIn().setHeader(\"access-control-allow-headers\", \"Content-Type, x-agency-id, x-operator-id, x-access-token\");\n        exchange.getIn().setHeader(\"access-control-allow-origin\", \"*\");\n        exchange.getIn().setHeader(\"access-control-allow-methods\", \"POST, GET, PUT, OPTIONS, DELETE\");\n    };\n}\n\n@BindToRegistry\npublic Processor setResponseMetadata() {\n    return exchange -> {\n\t\t\t\ttry {\n        if (exchange.getIn().getBody() instanceof ArrayList) {\n            ArrayList<Map<String, Object>> results = (ArrayList)exchange.getIn().getBody();\n            if (results.get(0).containsKey(\"total_rows\")) {\n                Long totalRows = (Long)results.get(0).get(\"total_rows\");\n                exchange.getIn().setHeader(\"x-response-metadata\", \"{\\\"total_rows\\\": \" + totalRows + \"}\");\n            }\n        }\n\t\t\t\t} catch (Exception e) {}\n    };\n}",
    "importsJava" : "import org.apache.camel.CamelContext;\nimport org.apache.camel.ProducerTemplate;\nimport org.apache.camel.BindToRegistry;\nimport org.apache.camel.Processor;\nimport org.apache.camel.Endpoint;\nimport org.apache.camel.ExchangePattern;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.commons.codec.binary.Base64;\n\nimport java.net.URL;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.ArrayList;\n//import java.util.stream.Stream;\n//import java.util.Optional;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport org.openapi4j.parser.*;\nimport org.openapi4j.parser.model.v3.OpenApi3;\nimport org.openapi4j.parser.model.v3.Operation;\nimport org.openapi4j.parser.model.v3.Response;\nimport org.openapi4j.parser.model.v3.Schema;\nimport org.openapi4j.core.model.v3.OAI3Context;",
    "type" : "Java"
  },
  "id" : "2d21c0b9-a829-4420-84e6-67d34aaf6026",
  "name" : "ResponseRenderer",
  "description" : "Function for rendering API response template",
  "createdAt" : "2023-10-04T18:05:17.511024493",
  "updatedAt" : "2023-10-04T18:05:17.511025769",
  "createdBy" : "612c1b37-217d-49f9-b344-54b8af760f6a",
  "updatedBy" : "612c1b37-217d-49f9-b344-54b8af760f6a"
}