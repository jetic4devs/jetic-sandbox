{
  "type" : "SOURCE_DEFINITIONS",
  "properties" : {
    "content" : "import org.apache.camel.BindToRegistry;\nimport org.apache.camel.Processor;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.ExchangeProperty;\nimport org.apache.camel.Header;\nimport org.apache.camel.Exchange;\n//import org.apache.camel.Endpoint;\nimport org.apache.camel.CamelContext;\nimport org.apache.camel.ProducerTemplate;\n//import org.apache.camel.Producer;\nimport org.apache.camel.ExchangePattern;\n\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Date;\nimport java.util.List;\nimport java.time.*;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.interfaces.DecodedJWT;\n\n\npublic class TokenService extends RouteBuilder {\n\n  private static final String TOKEN = \"token\";\n  private final Map<String, Map<String, Object>> tokenCache = new ConcurrentHashMap<>();\n\n  @Override\n  public void configure() {\n    getContext().getRegistry().bind(\"tokenGetters\", new TokenGetters());\n    getContext().getRegistry().bind(\"tokenSetters\", new TokenSetters());    \n  }\n\n  public class TokenGetters {\n\n    public String getToken(String audience, Exchange exchange) throws Exception {\n\n\t\t  Map<String, Object> tokenObject = tokenCache.get(audience);\t\t\n\n      String token = null;\n\t\t  Date ttl = null;\n\n\t\t\tDecodedJWT decodedJWT = null;\n\t\t\t\n\t\t\ttry {\n\t\t\t\ttoken = (String)tokenObject.get(\"token\");\n\t\t\t\tdecodedJWT = JWT.decode(token);\n\t\t\t} catch (Exception e) {\n\t\t\t\t//e.printStackTrace();\n\t\t\t}\n      \n      int ttlValid = 1;\n\n      if (decodedJWT != null) {\n        Date now = new Date();\n        ttlValid = now.compareTo(decodedJWT.getExpiresAt());\n      }\n\n      if (token == null || ttlValid > -1) {\n\t\t\t\tCamelContext context = getContext();\n\t\t\t\tSystem.out.println(\"No token found,  requesting new token for aud: \" + audience);\t\t\t\t\n\t\t\t\t\n\t\t\t\tString endpoint = \"direct:get-auth0-token\";\n        ProducerTemplate t = context.createProducerTemplate();\n\t\t\t\texchange.setPattern(ExchangePattern.InOut);\n\t\t\t\texchange = t.send(endpoint, exchange);\n\t\t\t\ttoken = (String)exchange.getOut().getHeader(\"x-access-token\");\n\n\t\t\t\t// Persist the new token in the cache\n\t\t\t\tt = context.createProducerTemplate();\n\t\t\t\texchange.setPattern(ExchangePattern.InOnly);\n\t\t\t\texchange = t.send(\"bean:tokenSetters?method=setToken('\" + token + \"')\", exchange);\n\t\t\t\t\n\t\t\t\tdecodedJWT = JWT.decode(token);\n      }\n      \n\t\t\t\texchange.setProperty(\"x-access-token\", token);\n\t\t\t\texchange.setProperty(\"x-token-audience\", decodedJWT.getAudience());\n\t\t\t\t\t\n      \treturn token;\n    }\n\n  }  \n\n  public class TokenSetters {\n// , @Header(\"x-access-token\") String token\n    public void setToken(String token, Exchange exchange) {\n\n\t\t\tMap<String, Object> tokenObject = new HashMap<>() {{\n\t\t\t\t//put(\"token\", exchange.getProperty(\"token\"));\n\t\t\t\tput(\"token\", token);\n\t\t\n\t\t\t}};\n\t\t\t\n\t\t\tDecodedJWT decodedJWT = JWT.decode(token);\n\t\t\tList<String> aud = decodedJWT.getAudience();\n\t\t\t\n\t\t\tfor (int i = 0; i < aud.size(); i++) {\n      \ttokenCache.put(aud.get(i), tokenObject);\n\t\t\t\tSystem.out.println(\"Persisting token for aud \" + aud.get(i));\n\t\t\t}\n\t\t\t\n    }\n\n  }    \n}",
    "filename" : "TokenService.java"
  },
  "id" : "ab21c0c4-f1e7-4903-ae37-0edcd17df0a7",
  "name" : "TokenService",
  "description" : "",
  "createdAt" : "2023-10-04T18:05:21.578349877",
  "updatedAt" : "2023-10-04T18:05:21.578350929",
  "createdBy" : "612c1b37-217d-49f9-b344-54b8af760f6a",
  "updatedBy" : "612c1b37-217d-49f9-b344-54b8af760f6a"
}