{
  "type" : "BEANS",
  "properties" : {
    "codeGroovy" : "beans {\n    myString = 'Hello World!'\n\n    myProcessor = processor { \n        it.in.body = 'Hello from Groovy'\n    }\n\n    myPredicate = predicate {\n        it.in.body != null\n    }\n}",
    "codeJava" : "//@BindToRegistry\n//public class CosineProximity\n//{\n\t\t@BindToRegistry\n    public class values\n    {\n        int val1;\n        int val2;\n        values(int v1, int v2)\n        {\n            this.val1=v1;\n            this.val2=v2;\n        }\n\n        public void Update_VAl(int v1, int v2)\n        {\n            this.val1=v1;\n            this.val2=v2;\n        }\n    }\n\t\t@BindToRegistry\n    public double score(String Text1, String Text2)\n    {\n        double sim_score=0.0000000;\n        //1. Identify distinct words from both documents\n        String [] word_seq_text1 = Text1.split(\" \");\n        String [] word_seq_text2 = Text2.split(\" \");\n        Hashtable<String, values> word_freq_vector = new Hashtable<String, CosineProximity.values>();\n        LinkedList<String> Distinct_words_text_1_2 = new LinkedList<String>();\n\n        //prepare word frequency vector by using Text1\n        for(int i=0;i<word_seq_text1.length;i++)\n        {\n            String tmp_wd = word_seq_text1[i].trim();\n            if(tmp_wd.length()>0)\n            {\n                if(word_freq_vector.containsKey(tmp_wd))\n                {\n                    values vals1 = word_freq_vector.get(tmp_wd);\n                    int freq1 = vals1.val1+1;\n                    int freq2 = vals1.val2;\n                    vals1.Update_VAl(freq1, freq2);\n                    word_freq_vector.put(tmp_wd, vals1);\n                }\n                else\n                {\n                    values vals1 = new values(1, 0);\n                    word_freq_vector.put(tmp_wd, vals1);\n                    Distinct_words_text_1_2.add(tmp_wd);\n                }\n            }\n        }\n\n        //prepare word frequency vector by using Text2\n        for(int i=0;i<word_seq_text2.length;i++)\n        {\n            String tmp_wd = word_seq_text2[i].trim();\n            if(tmp_wd.length()>0)\n            {\n                if(word_freq_vector.containsKey(tmp_wd))\n                {\n                    values vals1 = word_freq_vector.get(tmp_wd);\n                    int freq1 = vals1.val1;\n                    int freq2 = vals1.val2+1;\n                    vals1.Update_VAl(freq1, freq2);\n                    word_freq_vector.put(tmp_wd, vals1);\n                }\n                else\n                {\n                    values vals1 = new values(0, 1);\n                    word_freq_vector.put(tmp_wd, vals1);\n                    Distinct_words_text_1_2.add(tmp_wd);\n                }\n            }\n        }\n\n        //calculate the cosine similarity score.\n        double VectAB = 0.0000000;\n        double VectA_Sq = 0.0000000;\n        double VectB_Sq = 0.0000000;\n\n        for(int i=0;i<Distinct_words_text_1_2.size();i++)\n        {\n            values vals12 = word_freq_vector.get(Distinct_words_text_1_2.get(i));\n\n            double freq1 = (double)vals12.val1;\n            double freq2 = (double)vals12.val2;\n            System.out.println(Distinct_words_text_1_2.get(i)+\"#\"+freq1+\"#\"+freq2);\n\n            VectAB=VectAB+(freq1*freq2);\n\n            VectA_Sq = VectA_Sq + freq1*freq1;\n            VectB_Sq = VectB_Sq + freq2*freq2;\n        }\n\n        System.out.println(\"VectAB \"+VectAB+\" VectA_Sq \"+VectA_Sq+\" VectB_Sq \"+VectB_Sq);\n        sim_score = ((VectAB)/(Math.sqrt(VectA_Sq)*Math.sqrt(VectB_Sq)));\n\n        return(sim_score);\n    }\n\n}",
    "importsJava" : "import org.apache.camel.BindToRegistry;\nimport java.util.*;",
    "type" : "Java"
  },
  "id" : "94af90ee-1a4a-4ebd-be79-b5fdb7b69fdd",
  "name" : "CosineProximity",
  "description" : "",
  "createdAt" : "2023-10-04T18:05:23.935679326",
  "updatedAt" : "2023-10-04T18:05:23.935680677",
  "createdBy" : "612c1b37-217d-49f9-b344-54b8af760f6a",
  "updatedBy" : "612c1b37-217d-49f9-b344-54b8af760f6a"
}