{
  "type" : "BEANS",
  "properties" : {
    "codeGroovy" : "beans {\n    myString = 'Hello World!'\n\n    myProcessor = processor { \n        it.in.body = 'Hello from Groovy'\n    }\n\n    myPredicate = predicate {\n        it.in.body != null\n    }\n}",
    "codeJava" : "  private static final String FILEPATH = \"/etc/camel/resources/yakrcl-openapi.json\";\n  private static final List<String> WHITELIST_HEADERS = List.of(\n    \"accept\",\n    \"accept-charset\",\n    \"accept-encoding\",\n    \"cache-control\",\n    \"content-encoding\",\n    \"content-md5\",\n    \"content-type\"\n  );\n\n  @BeanInject\n  OpenApi3 openApi3;\n\n  @BeanInject\n  RequestValidator requestValidator;\n\n  @BindToRegistry\n  public OpenApi3 openApi3() throws ResolutionException, ValidationException {\n    return new OpenApi3Parser().parse(new File(FILEPATH), false);\n  }\n\n  @BindToRegistry\n  public RequestValidator requestValidator() throws ResolutionException, ValidationException {\n    return new RequestValidator(openApi3());\n  }\n\n  @BindToRegistry\n  public Processor validateRequest() {\n    return exchange -> {\n      Message message = exchange.getIn();\n      try {\t\t\t\t\n        if (\"true\".equalsIgnoreCase(exchange.getProperty(\"x-authorized\", String.class)) ||\n          \"true\".equalsIgnoreCase(message.getHeader(\"x-authorized\", String.class)) || exchange.getIn().getHeader(\"CamelHttpUri\") == null || exchange.getIn().getHeader(\"CamelHttpMethod\") == null || exchange.getIn().getHeader(\"CamelHttpPath\") == null) {\n          return;\n        }\n\t\t\t\t\n        Operation operation = null;\n        String xOperationId = message.getHeader(\"x-operation-id\", String.class);\n\n        if (xOperationId != null) {\n          operation = openApi3.getOperationById(xOperationId);\n        }\n\n        // HTTP405 - Check that the API contract has operation defined\n        if (operation == null) {\n\t\t\t\t\tlog.info(\"Can't map request for {} {} {}\", xOperationId, exchange.getIn().getHeader(\"CamelHttpMethod\"), exchange.getIn().getHeader(\"CamelHttpPath\"));\n          exchange.getIn().setHeader(\"CamelHttpResponseCode\", 405);\n          exchange.getIn().setBody(\"\");\n          return;\n        }\n\n        String requestUri = message.getHeader(\"CamelHttpUri\", String.class);\n        Method requestMethod = Method.getMethod(message.getHeader(\"CamelHttpMethod\", String.class));\n        String requestPath = message.getHeader(\"CamelHttpPath\", String.class);\n        String requestQuery = message.getHeader(\"CamelHttpQuery\", String.class);\n\n        HashMap<String, String> queryParams = new HashMap<>();\n        List<Parameter> apiParams = operation.getParameters();\n\n        if (apiParams != null && !apiParams.isEmpty()) {\n          for (Parameter param : apiParams) {\n            if (param.getIn().equals(\"query\") && message.getHeader(param.getName()) != null) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tString pValue = URLEncoder.encode((String) message.getHeader(param.getName()));\n  \t            queryParams.put(param.getName(), pValue);\n\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\tlog.warn(e.getMessage());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n          }\n        }\n\n        exchange.setProperty(\"x-query-params\", queryParams);\n        MultiStringMap<String> requestHeaders = new MultiStringMap<>(false);\n\n        for (Map.Entry<String, Object> header : message.getHeaders().entrySet()) {\n          String key = header.getKey();\n          Object value = header.getValue();\n          if ((WHITELIST_HEADERS.contains(key.toLowerCase()) || key.toLowerCase().startsWith(\"x-\")) && value != null)\n            requestHeaders.put(key, String.valueOf(value));\n        }\n\n        Map<String, Collection<String>> apiRequestHeaders = requestHeaders.asUnmodifiableMap();\n        log.info(\"requestUri: '{}', requestMethod: '{}', apiOperation: '{}', apiRequestHeaders: '{}'\", requestUri, requestMethod, xOperationId, apiRequestHeaders);\n\n        DefaultRequest.Builder apiRequestBuilder = new DefaultRequest.Builder(requestUri, requestMethod)\n          .headers(apiRequestHeaders);\n//          .query(requestQuery);\n\n        if (message.getBody() != null) {\n          String requestBody = message.getBody(String.class);\n          apiRequestBuilder.body(Body.from(requestBody));\n        }\n\n        Request apiRequest = apiRequestBuilder.build();\n\n        int exCount = 1;\n        while (true) {\n          try {\n            requestValidator.validate(apiRequest);\n            log.info(\"OpenApiRequestValidator validation SUCCESS for '{}': '{}'\", requestMethod, requestUri);\n            return;\n          } catch (ValidationException ve) {\n            requestValidator = requestValidator();\n            if (exCount++ >= 10) {\n              log.warn(\"OpenApiRequestValidator validation ERROR for '{}': '{}'\", requestMethod, requestUri, ve);\n              message.setHeader(\"CamelHttpResponseCode\", 400);\n              exchange.setProperty(\"error\", ve.toString());\n              return;\n            }\n          }\n        }\n      } catch (Exception ex) {\n        log.warn(\"OpenApiRequestValidator error\", ex);\n        message.setHeader(\"CamelHttpResponseCode\", 400);\n        exchange.setProperty(\"error\", ex.toString());\n      }\n    };\n  }\n",
    "importsJava" : "import org.apache.camel.BeanInject;\nimport org.apache.camel.BindToRegistry;\nimport org.apache.camel.Message;\nimport org.apache.camel.Processor;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.openapi4j.core.exception.ResolutionException;\nimport org.openapi4j.core.util.MultiStringMap;\nimport org.openapi4j.core.validation.ValidationException;\nimport org.openapi4j.operation.validator.model.Request;\nimport org.openapi4j.operation.validator.model.Request.Method;\nimport org.openapi4j.operation.validator.model.impl.Body;\nimport org.openapi4j.operation.validator.model.impl.DefaultRequest;\nimport org.openapi4j.operation.validator.validation.RequestValidator;\nimport org.openapi4j.parser.OpenApi3Parser;\nimport org.openapi4j.parser.model.v3.OpenApi3;\nimport org.openapi4j.parser.model.v3.Operation;\nimport org.openapi4j.parser.model.v3.Parameter;\n\nimport java.io.File;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.net.URLEncoder;\n",
    "type" : "Java"
  },
  "id" : "e859d27c-054e-489d-96ef-1338b179fde7",
  "name" : "OpenApiRequestValidator",
  "description" : "API Request Validator Bean",
  "createdAt" : "2023-10-04T18:05:17.585707452",
  "updatedAt" : "2023-10-04T18:05:17.585708319",
  "createdBy" : "612c1b37-217d-49f9-b344-54b8af760f6a",
  "updatedBy" : "612c1b37-217d-49f9-b344-54b8af760f6a"
}