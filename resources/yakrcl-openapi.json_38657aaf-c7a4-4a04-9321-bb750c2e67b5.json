{
  "type" : "RESOURCE_FILE",
  "properties" : {
    "compression" : "false",
    "content" : "Hello from text.txt",
    "file" : "data:application/json;base64,{
    "openapi": "3.0.2",
    "info": {
        "title": "Convey911 Messaging APIs",
        "version": "1.0.0",
        "description": "REST APIs for managing text/911 conversations and events inside the Responder Connect Live application.",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Convey911 Team",
            "url": "https://convey911.com",
            "email": "tech@convey911.com"
        }
    },
    "servers": [
        {
            "url": "https://api.convey911.com/api/v1",
            "description": "Production API endpoint"
        },
        {
            "url": "https://api-development.convey911.com",
            "description": "QA API environment"
        },
        {
            "url": "https://api-sandbox.convey911.com",
            "description": "Sandbox API endpoint"
        }
    ],
    "paths": {
        "/conversations": {
            "summary": "Conversation API Resource",
            "get": {
                "tags": [
                    "Conversations"
                ],
                "parameters": [
                    {
                        "name": "status",
                        "description": "Returns conversations matching the specified status.",
                        "schema": {
                            "enum": [
                                "active",
                                "closed",
                                "archived"
                            ],
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of agency to bind to conversation request",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "provider_number",
                        "description": "Filter results by the provider phone number associated with the conversation",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "provider_resource_id",
                        "description": "Filter results by the provider resource ID associated with the conversation.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "recipient",
                        "description": "Search by recipient phone number.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "orderDir",
                        "description": "Sort order direction",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "orderBy",
                        "description": "Specifies column to sort results by",
                        "schema": {
                            "enum": [
                                "created_at",
                                "updated_at",
                                "closed_at",
                                "status"
                            ],
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "offset",
                        "description": "Specifies the offset to begin returning results",
                        "schema": {
                            "type": "number"
                        },
                        "in": "query"
                    },
                    {
                        "name": "limit",
                        "description": "Specifies the number of results to return",
                        "schema": {
                            "type": "number"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Conversations"
                                },
                                "examples": {
                                    "Get Conversations Response": {
                                        "value": {
                                            "requestId": "E68AA20CF1BCB66-0000000000000000",
                                            "apiOperation": "getConversationById",
                                            "objectType": "Conversation",
                                            "data": {
                                                "closed_at": "2022-02-14 19:30:18",
                                                "number_id": "f525bc36-abbd-4e8d-8160-eb4eafdbaaa4",
                                                "operator_id": "267a49e9-be38-40f0-a56c-d7db9a40dd27",
                                                "agency_id": "67b243db-6c97-4dd0-97d6-3483b221257c",
                                                "created_at": "2022-02-13 22:58:40",
                                                "label": "First conversation",
                                                "message_count": 17,
                                                "number": "+18483051862",
                                                "updated_at": "2022-02-14 19:30:18",
                                                "conversation_id": "ca28088d-10ea-47c2-bfe5-b8ea4ad2f260",
                                                "recipients": [
                                                    {
                                                        "number": "+14432501272",
                                                        "recipient_id": "f9fa9546-c2df-4ef6-8141-d4eb316fc55a",
                                                        "label": "Ava Bruns",
                                                        "language": "es"
                                                    }
                                                ],
                                                "status": "active"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "200 OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "create:conversation"
                        ]
                    }
                ],
                "operationId": "getConversations",
                "summary": "Get Conversations",
                "description": "Returns all conversations for Agency that the user is assigned to."
            },
            "post": {
                "requestBody": {
                    "description": "JSON request containing `Conversation` object.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Conversation"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Conversations"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "Specifies the agency in which the conversation is being created on behalf of.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "x-operator-id",
                        "description": "The UUID of the operator that will be assigned to the conversation.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": false
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Conversation"
                                }
                            }
                        },
                        "description": "Conversation Created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Malformed or invalid request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Conversation"
                                }
                            }
                        },
                        "description": "Existing conversation found"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "create:conversation"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "create:conversation"
                        ]
                    }
                ],
                "operationId": "createConversation",
                "summary": "Create a New Conversation",
                "description": "Creates a new conversation between an operator and one or more recipients."
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "UUID of agency to bind to conversation request",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                },
                {
                    "name": "status",
                    "description": "Filter results by conversation status",
                    "schema": {
                        "enum": [
                            "active",
                            "closed",
                            "deleted"
                        ],
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "orderBy",
                    "description": "Specifies column to sort results by",
                    "schema": {
                        "enum": [
                            "created_at",
                            "updated_at",
                            "closed_at",
                            "status"
                        ],
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "orderDir",
                    "description": "Sort order direction",
                    "schema": {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "limit",
                    "description": "Specifies the number of results to return",
                    "schema": {
                        "type": "number"
                    },
                    "in": "query"
                },
                {
                    "name": "offset",
                    "description": "Specifies the offset to begin returning results",
                    "schema": {
                        "type": "number"
                    },
                    "in": "query"
                },
                {
                    "name": "recipient",
                    "description": "Search by recipient phone number.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "channel",
                    "description": "Scope results by conversation channel.",
                    "schema": {
                        "enum": [
                            "sms",
                            "voice",
                            "web",
                            "media",
                            "notification"
                        ],
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/agencies": {
            "summary": "Path used to manage the list of agencies.",
            "description": "The REST endpoint/path used to list and create zero or more `Agency` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "Agencies"
                ],
                "parameters": [
                    {
                        "name": "fccId",
                        "description": "The FCC ID of the agency to search for.",
                        "schema": {
                            "type": "number"
                        },
                        "in": "query"
                    },
                    {
                        "name": "domain",
                        "description": "Search agencies by domain/URL",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "resourceId",
                        "description": "Filter results by agency resource ID",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Agencies"
                                }
                            }
                        },
                        "description": "List of Agencies"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "list:agencies"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "list:agencies"
                        ]
                    }
                ],
                "operationId": "getAgencies",
                "summary": "Get Agencies",
                "description": "Gets a list of all `Agency` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `Agency` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Agency"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Agencies"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Agency"
                                }
                            }
                        },
                        "description": "Successful response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "create:agency"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "create:agency"
                        ]
                    }
                ],
                "operationId": "createAgency",
                "summary": "Create New Agency",
                "description": "Creates a new instance of a `Agency`."
            }
        },
        "/messages": {
            "summary": "Message API resource",
            "description": "Contains APIs for RESTfully managing message data.",
            "get": {
                "tags": [
                    "Messages"
                ],
                "parameters": [
                    {
                        "name": "conversationId",
                        "description": "Filter messages by conversation UUID.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    },
                    {
                        "name": "status",
                        "description": "Filters message by status",
                        "schema": {
                            "enum": [
                                "pending",
                                "sent",
                                "delivered",
                                "failed"
                            ],
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "x-agency-id",
                        "description": "Agency ID to bind requests to.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "source",
                        "description": "Filter results by message source",
                        "schema": {
                            "enum": [
                                "sms",
                                "chat",
                                "voice",
                                "transcribe"
                            ],
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Messages"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:messages"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:messages"
                        ]
                    }
                ],
                "operationId": "getMessages",
                "summary": "Get Messages",
                "description": "Returns an array of [`Messages`]() based on the input query parameters."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Message"
                            },
                            "examples": {
                                "Create Message Request": {
                                    "value": {
                                        "provider_number_id": "f525bc36-abbd-4e8d-8160-eb4eafdbaaa4",
                                        "conversation_id": "ad31a0c4-7f30-4253-9bec-1d20a2eae748",
                                        "provider_number": "+18136994301",
                                        "body": "mi hermana está enferma y necesita una ambulancia",
                                        "recipient_number": "+14432501272",
                                        "direction": "inbound",
                                        "status": "delivered",
                                        "num_media": 0
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Messages"
                ],
                "parameters": [
                    {
                        "name": "x-operator-id",
                        "description": "UUID of the operator sending the message.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header"
                    }
                ],
                "responses": {
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                }
                            }
                        },
                        "description": "Message accepted"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "create:message"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "create:message"
                        ]
                    }
                ],
                "operationId": "createMessage",
                "summary": "Create New Message",
                "description": "Creates a new message object on the conversation specified in the request."
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "Agency ID to bind requests to.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/numbers": {
            "summary": "Phone Numbers",
            "description": "API resource for managing phone numbers in the RCLive platform.",
            "get": {
                "tags": [
                    "Numbers"
                ],
                "parameters": [
                    {
                        "name": "status",
                        "description": "Filter by phone number status",
                        "schema": {
                            "enum": [
                                "active",
                                "retired",
                                "faulty"
                            ],
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "capability",
                        "description": "Filter number by capability",
                        "schema": {
                            "enum": [
                                "sms",
                                "mms"
                            ],
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "provider",
                        "description": "Filter phone numbers by provider",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "limit",
                        "description": "Limits the number of objects returned",
                        "schema": {
                            "type": "number"
                        },
                        "in": "query"
                    },
                    {
                        "name": "number",
                        "description": "Scope results by phone number",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of agency to query for provider numbers.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": false
                    },
                    {
                        "name": "vanity",
                        "description": "If true, scopes results to vanity numbers only",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    },
                    {
                        "name": "inbound",
                        "description": "If true, scope results to inbound numbers",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    },
                    {
                        "name": "outbound",
                        "description": "If true, scope results to outbound numbers",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    },
                    {
                        "name": "orderBy",
                        "description": "Specified sort ordering",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "orderDir",
                        "description": "Specifies sort order of results",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProviderNumbers"
                                }
                            }
                        },
                        "description": "Get numbers response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:numbers"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:numbers"
                        ]
                    }
                ],
                "operationId": "getProviderNumbers",
                "summary": "Get Provider Numbers",
                "description": "Returns an array of [`ProviderNumber`]()s associated with the user's agency account. "
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProviderNumber"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Numbers"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProviderNumber"
                                }
                            }
                        },
                        "description": "Provider number created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "create:number"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "create:number"
                        ]
                    }
                ],
                "operationId": "createProviderNumber",
                "summary": "Create Provider Number",
                "description": "Creates a new provider number. Returns a [`ProviderNumber`]() object in the API response."
            }
        },
        "/recipients": {
            "summary": "Path used to manage the list of recipients.",
            "description": "The REST endpoint/path used to list and create zero or more `Recipient` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "Recipients"
                ],
                "parameters": [
                    {
                        "name": "recipientNumber",
                        "description": "Scope results to specified recipient phone number",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recipients"
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Recipient` entities."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:recipients"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:recipients"
                        ]
                    }
                ],
                "operationId": "getRecipients",
                "summary": "List All Recipients",
                "description": "Gets a list of all `Recipient` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `Recipient` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Recipient"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Recipients"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recipient"
                                }
                            }
                        },
                        "description": "New recipient created"
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recipient"
                                }
                            }
                        },
                        "description": "Recipient already exists"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "create:recipient"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "create:recipient"
                        ]
                    }
                ],
                "operationId": "createRecipient",
                "summary": "Create a Recipient",
                "description": "Creates a new instance of a `Recipient` or returns existing recipient matching the phone number provided."
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "Scope requests within the agency defined in the header. ",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/conversations/{conversationId}": {
            "summary": "Conversation by ID Resource",
            "description": "Contains API resources for a conversation object.",
            "get": {
                "tags": [
                    "Conversations"
                ],
                "responses": {
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "unexpected error"
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Conversation"
                                }
                            }
                        },
                        "description": "Conversation by ID response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:conversation"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:conversation"
                        ]
                    }
                ],
                "operationId": "getConversationById",
                "summary": "Get Conversation by ID",
                "description": "Returns a conversation specified by ID in the path."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Object"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Conversations"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "conversationId",
                        "description": "Conversation ID",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                }
                            }
                        },
                        "description": "Message Reply Added"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conversation Not Found"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "update:conversation"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "update:conversation"
                        ]
                    }
                ],
                "operationId": "updateConversation",
                "summary": "Update Conversation",
                "description": "Updates the conversation"
            },
            "delete": {
                "tags": [
                    "Conversations"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "unexpected error"
                    },
                    "204": {
                        "description": "pet deleted"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "delete:conversation"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "delete:conversation"
                        ]
                    }
                ],
                "operationId": "deleteConversation",
                "summary": "Deletes a Conversation",
                "description": "Deletes the conversation specified in the path."
            },
            "parameters": [
                {
                    "name": "conversationId",
                    "description": "Conversation ID",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "x-agency-id",
                    "description": "UUID of agency to bind to conversation request",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/messages/{messageId}": {
            "summary": "API Resource for Message Objects",
            "get": {
                "tags": [
                    "Messages"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:messages"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:messages"
                        ]
                    }
                ],
                "operationId": "getMessageById",
                "summary": "Get Message by ID",
                "description": "Returns the [`Message`]() objected specified by `messageId` in the path."
            },
            "parameters": [
                {
                    "name": "messageId",
                    "description": "Message UUID",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/conversations/{conversationId}/messages": {
            "summary": "API resource for retrieving and managing messages on a conversation.",
            "get": {
                "tags": [
                    "Conversations",
                    "Messages"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of agency to bind to request",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Messages"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "list:conversation:messages"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "list:conversation:messages"
                        ]
                    }
                ],
                "operationId": "getConversationMessages",
                "summary": "Get Messages for Conversation",
                "description": "Returns an array of `Message` objects for the specified conversation."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConversationReply"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Conversations",
                    "Messages"
                ],
                "responses": {
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conversation Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationReply"
                                },
                                "examples": {
                                    "API Response from Conversation Reply": {
                                        "value": {
                                            "requestId": "E56F83236527A67-0000000000000000",
                                            "apiOperation": "createMessageReply",
                                            "objectType": "ConversationReply",
                                            "data": {
                                                "message_body": "Are you still there?",
                                                "conversation_id": "ca28088d-10ea-47c2-bfe5-b8ea4ad2f260",
                                                "recipients": [
                                                    "+14432501272"
                                                ],
                                                "agency_id": "67b243db-6c97-4dd0-97d6-3483b221257c"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Reply Accepted for Processing"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "create:conversation:message"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "create:conversation:message"
                        ]
                    }
                ],
                "operationId": "createMessageReply",
                "summary": "Create Message Reply on Conversation",
                "description": "Creates a new outbound message as a reply on an existing conversation."
            },
            "parameters": [
                {
                    "name": "conversationId",
                    "description": "Conversation UUID",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "x-agency-id",
                    "description": "UUID of agency to bind to conversation request",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/agencies/{agencyId}": {
            "summary": "Path used to manage a single Agency.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Agency`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "Agencies"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Agency"
                                }
                            }
                        },
                        "description": "Agency Object"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Agency Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:agency"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:agency"
                        ]
                    }
                ],
                "operationId": "getAgencyById",
                "summary": "Get an Agency by ID",
                "description": "Gets the details of a single instance of a `Agency`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Agency` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Agency"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Agencies"
                ],
                "responses": {
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Agency"
                                }
                            }
                        },
                        "description": "Agency Updated"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "update:agency"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "update:agency"
                        ]
                    }
                ],
                "operationId": "updateAgency",
                "summary": "Update an Agency",
                "description": "Updates an existing `Agency`."
            },
            "parameters": [
                {
                    "name": "agencyId",
                    "description": "A unique identifier for a `Agency`.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/agencies/{agencyId}/providers": {
            "summary": "Agency Providers Resource",
            "description": "Communications provider resources for an agency.",
            "get": {
                "tags": [
                    "Agencies",
                    "Providers"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgencyProviders"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Agency not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "openid-security-scheme": [
                        ]
                    }
                ],
                "operationId": "getAgencyProviders",
                "summary": "Get Agency Messaging Providers",
                "description": "Returns an array of `Provider`s associated to the agency specified in the request path."
            },
            "parameters": [
                {
                    "name": "agencyId",
                    "description": "Agency UUID",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/numbers/{numberOrId}": {
            "summary": "Provider Number by ID",
            "description": "Resource handler for performing API operations on provider number by ID",
            "get": {
                "tags": [
                    "Numbers"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of agency for the request",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProviderNumber"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:numbers"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:numbers"
                        ]
                    }
                ],
                "operationId": "getProviderNumberById",
                "summary": "Get Phone Number by Number or ID",
                "description": "Returns the [`Number`]() object associated with the UUID or phone-number in the path."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "number"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Numbers"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of agency associated with the request",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ApiDataResponse"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "update:number"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "update:number"
                        ]
                    }
                ],
                "operationId": "updateProviderNumber",
                "summary": "Update Phone Number",
                "description": "Updates the number specified in the path and returns the associated [`Number`]() object. "
            },
            "delete": {
                "tags": [
                    "Numbers"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of agency associated with the request",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Number unprovisioned."
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "delete:number"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "delete:number"
                        ]
                    }
                ],
                "operationId": "releaseProviderNumber",
                "summary": "Release Phone Number",
                "description": "Releases phone number from your agency's account while preserving the historical data associated with the number."
            },
            "parameters": [
                {
                    "name": "numberOrId",
                    "description": "UUID or phone-number of the number to retrieve ",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/numbers/{numberOrId}/messages": {
            "summary": "Phone number message handler",
            "description": "API resource for inbound messages destined for the number specified in the path.",
            "get": {
                "tags": [
                    "Numbers",
                    "Messages"
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ApiDataResponse"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:messages"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:messages"
                        ]
                    }
                ],
                "operationId": "getMessagesForNumber",
                "summary": "Get Messages for Number",
                "description": "Returns an array of messages handled by the phone number specified in the path."
            },
            "parameters": [
                {
                    "name": "numberOrId",
                    "description": "Phone number or ID that's receiving the incoming message.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/users/me": {
            "summary": "API resource for managing the user identified in the JWT",
            "description": "Get/update current logged in user",
            "get": {
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency. If present, response will include roles that the user has been assigned for that agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-authorization-code-scheme": [
                            "read:currentuser"
                        ]
                    }
                ],
                "operationId": "getCurrentUser",
                "summary": "Get Current User",
                "description": "Returns the current user identified by the JWT included with the request"
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-authorization-code-scheme": [
                            "update:currentuser"
                        ]
                    }
                ],
                "operationId": "updateCurrentUser",
                "summary": "Update current user",
                "description": "Updates the current user's profile"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Users"
                ],
                "responses": {
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "User Created"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "User exists"
                    }
                },
                "security": [
                    {
                        "oauth2-authorization-code-scheme": [
                            "create:currentuser"
                        ]
                    }
                ],
                "operationId": "createCurrentUser",
                "summary": "Creates the Current User",
                "description": "Creates the user specified in the JWT "
            }
        },
        "/users": {
            "summary": "Path used to manage the list of users.",
            "description": "The REST endpoint/path used to list and create zero or more `User` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of agency to query for users.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "limit",
                        "description": "Specifies number of results to return.",
                        "schema": {
                            "type": "number"
                        },
                        "in": "query"
                    },
                    {
                        "name": "offset",
                        "description": "Specifies the offset to start when returning results.",
                        "schema": {
                            "type": "number"
                        },
                        "in": "query"
                    },
                    {
                        "name": "orderBy",
                        "description": "Specifies the column to use for sort ordering.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "orderDir",
                        "description": "Specifies the sort order direction when returning results.",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "search",
                        "description": "Search query",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Users"
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `User` entities."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "list:users"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "list:users"
                        ]
                    }
                ],
                "operationId": "getUsers",
                "summary": "List All Users",
                "description": "Gets a list of all `User` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `User` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header"
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "Successful response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "create:user"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "create:user"
                        ]
                    }
                ],
                "operationId": "createUser",
                "summary": "Create a User",
                "description": "Creates a new instance of a `User`."
            }
        },
        "/users/{userId}": {
            "summary": "Path used to manage a single User.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `User`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of agency associated with request.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `User`."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:user"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:user"
                        ]
                    }
                ],
                "operationId": "getUserById",
                "summary": "Get User By ID",
                "description": "Gets the details of a single instance of a `User`."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "User updated"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "update:user"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "update:user"
                        ]
                    }
                ],
                "operationId": "updateUser",
                "summary": "Update User",
                "description": "Updates the user account specified by `userId` in the path."
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of agency associated with request.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "hardDelete",
                        "description": "If true, removes the user entirely from the database.",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "delete:user"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "delete:user"
                        ]
                    }
                ],
                "operationId": "deleteUser",
                "summary": "Delete User",
                "description": "Removes the user account from the agency specified by `x-agency-id`. "
            },
            "parameters": [
                {
                    "name": "userId",
                    "description": "A unique identifier for a `User`.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "x-agency-id",
                    "description": "UUID of agency associated with request.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header"
                }
            ]
        },
        "/sessions": {
            "summary": "Path used to manage the list of sessions.",
            "description": "The REST endpoint/path used to list and create zero or more `Session` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "Sessions"
                ],
                "parameters": [
                    {
                        "name": "showAll",
                        "description": "If true, returns all session associated with the agency ID.",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    },
                    {
                        "name": "x-agency-id",
                        "description": "Associated agency UUID",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Sessions"
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Session` entities."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "User not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:sessions"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:sessions"
                        ]
                    }
                ],
                "operationId": "getUserSessions",
                "summary": "List All Sessions for a User",
                "description": "Gets a list of all `Session` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `Session` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Session"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Sessions"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        },
                        "description": "Successful response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "User not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server error"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "create:session"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "create:session"
                        ]
                    }
                ],
                "operationId": "createUserSession",
                "summary": "Create a New User Session",
                "description": "Creates a new instance of a `Session` for the user identified in the JWT"
            }
        },
        "/sessions/{sessionId}": {
            "summary": "Path used to manage a single Session.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Session`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "Sessions"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Session`."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Session ID not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:sessions"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:sessions"
                        ]
                    }
                ],
                "operationId": "getSessionById",
                "summary": "Get a Session by ID",
                "description": "Gets the details of a single instance of a `Session` for the given user."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgencySession"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Sessions",
                    "Agencies"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgencySession"
                                }
                            }
                        },
                        "description": "Session successfully attached to agency"
                    },
                    "422": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Unprocessable request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "User not provisioned on specified agency"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "bind:session"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "bind:session"
                        ]
                    }
                ],
                "operationId": "bindSessionToAgency",
                "summary": "Binds User Session to Agency",
                "description": "Binds a user's session to the specified agency."
            },
            "delete": {
                "tags": [
                    "Sessions"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Session Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        },
                        "description": "Session Deleted"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "update:session"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "update:session"
                        ]
                    }
                ],
                "operationId": "deleteSession",
                "summary": "Delete User Session",
                "description": "Deletes an existing `Session`."
            },
            "parameters": [
                {
                    "name": "sessionId",
                    "description": "A unique identifier for a `Session`.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/agencies/{agencyId}/settings": {
            "summary": "API resource for retrieving and managing agency settings.",
            "get": {
                "tags": [
                    "Agencies",
                    "Settings"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Settings"
                                }
                            }
                        },
                        "description": "Agency Settings Response"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Agency Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "openid-security-scheme": [
                        ]
                    }
                ],
                "operationId": "getAgencySettings",
                "summary": "Get Agency Settings",
                "description": "Returns a key/value map of settings for the given agency. "
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Settings"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Agencies",
                    "Settings"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Settings"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "openid-security-scheme": [
                        ]
                    }
                ],
                "operationId": "updateAgencySettings",
                "summary": "Update Agency Settings",
                "description": "Updates agency settings."
            },
            "parameters": [
                {
                    "name": "agencyId",
                    "description": "Agency UUID",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/agencies/{agencyId}/templates": {
            "summary": "API resource for retrieving and managing an agency's message templates.",
            "get": {
                "tags": [
                    "Agencies",
                    "Templates"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "description": "Search query to return templates for.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageTemplates"
                                }
                            }
                        },
                        "description": "Agency Message Templates Response"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Agency Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "openid-security-scheme": [
                        ]
                    }
                ],
                "operationId": "getMessageTemplates",
                "summary": "Get Message Templates",
                "description": "Retrieves a list of `MessageTemplate`s for the specified agency."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageTemplate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Agencies",
                    "Templates"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageTemplate"
                                }
                            }
                        },
                        "description": "Message Template Created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Agency Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "openid-security-scheme": [
                        ]
                    }
                ],
                "operationId": "createMessageTemplate",
                "summary": "Create Message Template",
                "description": "Creates a new message template for the specified agency."
            },
            "parameters": [
                {
                    "name": "agencyId",
                    "description": "Agency UUID",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/agencies/{agencyId}/templates/{templateId}": {
            "summary": "API resource for retrieving and managing a single `MessageTemplate`",
            "get": {
                "tags": [
                    "Agencies",
                    "Templates"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageTemplate"
                                }
                            }
                        },
                        "description": "Message Template Response"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Template Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "getMessageTemplateById",
                "summary": "Get Message Template by ID",
                "description": "Retrieve the `MessageTemplate` for the specified ID"
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageTemplate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Agencies",
                    "Templates"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageTemplate"
                                }
                            }
                        },
                        "description": "Message Template Updated"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Template or agency not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "openid-security-scheme": [
                        ]
                    }
                ],
                "operationId": "updateMessageTemplate",
                "summary": "Update Message Template",
                "description": "Updates the message template specified in the request"
            },
            "delete": {
                "tags": [
                    "Agencies",
                    "Templates"
                ],
                "responses": {
                    "204": {
                        "description": "Message Template Deleted"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Template or Agency Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "openid-security-scheme": [
                        ]
                    }
                ],
                "operationId": "deleteMessageTemplate",
                "summary": "Delete Message Template",
                "description": "Deletes the specified message template"
            },
            "parameters": [
                {
                    "name": "agencyId",
                    "description": "Agency UUID",
                    "in": "path",
                    "required": true
                },
                {
                    "name": "templateId",
                    "description": "Template UUID",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/conversations/{conversationId}/close": {
            "summary": "API operation for closing a conversation",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConversationReply"
                            }
                        }
                    },
                    "required": false
                },
                "tags": [
                    "Conversations"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Conversation"
                                }
                            }
                        },
                        "description": "Conversation Closed"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "update:conversation"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "update:conversation"
                        ]
                    }
                ],
                "operationId": "closeConversation",
                "summary": "Close Conversation",
                "description": "Sets the converstation status to `closed`, sends all recipients on the conversation a pre-configured message, and generates the encrypted conversation artifacts. "
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                },
                {
                    "name": "conversationId",
                    "description": "Conversation UUID",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/recipients/{numberOrId}": {
            "summary": "Path used to manage a single Recipient.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Recipient`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "Recipients"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recipient"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Recipient`."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:recipients"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:recipients"
                        ]
                    }
                ],
                "operationId": "getRecipientByNumberOrId",
                "summary": "Get a Recipient by Phone Number or ID",
                "description": "Gets the details of a single instance of a `Recipient`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Recipient` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Recipient"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Recipients"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recipient"
                                }
                            }
                        },
                        "description": "Recipient Updated"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "update:recipient"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "update:recipient"
                        ]
                    }
                ],
                "operationId": "updateRecipient",
                "summary": "Update a Recipient",
                "description": "Updates an existing `Recipient`."
            },
            "delete": {
                "tags": [
                    "Recipients"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "delete:recipient"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "delete:recipient"
                        ]
                    }
                ],
                "operationId": "deleteRecipient",
                "summary": "Delete a Recipient",
                "description": "Deletes an existing `Recipient`."
            },
            "parameters": [
                {
                    "name": "numberOrId",
                    "description": "Phone number or UUID of the `Recipient`.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/recipients/import": {
            "summary": "Import a Recipient from an External Provider",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProviderRecipient"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Recipients"
                ],
                "responses": {
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Provider Recipient Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recipient"
                                }
                            }
                        },
                        "description": "Recipient Response"
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recipient"
                                }
                            }
                        },
                        "description": "Recipient Created"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "create:recipient"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "create:recipient"
                        ]
                    }
                ],
                "operationId": "importRecipient",
                "summary": "Import a Recipient from an External Provider",
                "description": "This endpoint creates a new recipient from a provider token"
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "UUID of agency associated with recipient",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/agencies/{agencyId}/users": {
            "summary": "API resource for managing users assigned to the Agency account.",
            "get": {
                "tags": [
                    "Agencies",
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "limit",
                        "description": "Specifies number of results to return",
                        "schema": {
                            "type": "number"
                        },
                        "in": "query"
                    },
                    {
                        "name": "offset",
                        "description": "Specifies the offset to begin returning results",
                        "schema": {
                            "type": "number"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgencyUsers"
                                }
                            }
                        },
                        "description": "OK"
                    }
                },
                "security": [
                    {
                        "openid-security-scheme": [
                        ]
                    }
                ],
                "operationId": "getAgencyUsers",
                "summary": "Get Users Assigned to Agency",
                "description": "Return users assigned to the specified agency."
            },
            "parameters": [
                {
                    "name": "agencyId",
                    "description": "Agency UUID",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/agencies/{agencyId}/users/{userId}": {
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgencyUser"
                            }
                        }
                    }
                },
                "tags": [
                    "Agencies",
                    "Users"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgencyUser"
                                }
                            }
                        },
                        "description": "User Added to Agency"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "User Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "openid-security-scheme": [
                        ]
                    }
                ],
                "operationId": "addAgencyUser",
                "summary": "Add User to an Agency",
                "description": "Adds the agency specified by `agencyId` to the user's account."
            },
            "delete": {
                "tags": [
                    "Agencies",
                    "Users"
                ],
                "responses": {
                    "204": {
                        "description": "User Removed"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "User Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "openid-security-scheme": [
                        ]
                    }
                ],
                "operationId": "removeAgencyUser",
                "summary": "Remove User from Agency",
                "description": "Removes a user from the specified agency."
            },
            "parameters": [
                {
                    "name": "agencyId",
                    "description": "Agency UUID",
                    "in": "path",
                    "required": true
                },
                {
                    "name": "userId",
                    "description": "User UUID",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/artifacts": {
            "summary": "Path used to manage the list of artifacts.",
            "description": "The REST endpoint/path used to list and create zero or more `Artifact` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "Artifacts"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of agency to query.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "conversationId",
                        "description": "Scope results by conversation ID",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Artifacts"
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Artifact` entities."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Agency not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "openid-security-scheme": [
                        ]
                    }
                ],
                "operationId": "getArtifacts",
                "summary": "List All Artifacts",
                "description": "Gets a list of all `Artifact` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `Artifact` to be created.",
                    "content": {
                        "multipart/form-data": {

                        }
                    },
                    "required": true
                },
                "tags": [
                    "Artifacts"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Artifact"
                                }
                            }
                        },
                        "description": "Successful response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "openid-security-scheme": [
                        ]
                    }
                ],
                "operationId": "createArtifact",
                "summary": "Create a Artifact",
                "description": "Creates a new instance of a `Artifact`."
            }
        },
        "/artifacts/{artifactId}": {
            "summary": "Path used to manage a single Artifact.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Artifact`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "Artifacts"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Artifact"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Artifact`."
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "openid-security-scheme": [
                        ]
                    }
                ],
                "operationId": "getArtifactById",
                "summary": "Get a Artifact",
                "description": "Gets the details of a single instance of a `Artifact`."
            },
            "parameters": [
                {
                    "name": "artifactId",
                    "description": "A unique identifier for a `Artifact`.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/tokens": {
            "summary": "Magic token API resource",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MagicToken"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Tokens"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MagicToken"
                                }
                            }
                        },
                        "description": "The magic token created"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "create:token"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "create:token"
                        ]
                    }
                ],
                "operationId": "createMagicToken",
                "summary": "Create Magic Token",
                "description": "Creates a new magic token."
            }
        },
        "/tokens/{token}": {
            "get": {
                "tags": [
                    "Tokens"
                ],
                "parameters": [
                    {
                        "name": "token",
                        "description": "Token",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MagicToken"
                                }
                            }
                        },
                        "description": "Magic token response"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "getMagicToken",
                "summary": "Get Magic Token",
                "description": "Returns the magic token specified by the `token` path parameter."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Object"
                            }
                        }
                    }
                },
                "tags": [
                    "Tokens"
                ],
                "parameters": [
                    {
                        "name": "x-access-token",
                        "description": "Access key provided in the magic token.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": false
                    }
                ],
                "responses": {
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Object"
                                }
                            }
                        },
                        "description": "Token fulfillment request accepted."
                    },
                    "405": {
                        "description": "Magic token does not support this service type."
                    }
                },
                "operationId": "fulfillMagicToken",
                "summary": "Fulfill Magic Token",
                "description": "Accepts a request to be fulfilled against the `service_type` associated with the magic token."
            },
            "parameters": [
                {
                    "name": "token",
                    "description": "Magic token to return.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/attachments": {
            "summary": "Path used to manage the list of attachments.",
            "description": "The REST endpoint/path used to list and create zero or more `Attachment` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "Attachments"
                ],
                "parameters": [
                    {
                        "name": "conversationId",
                        "description": "UUID of conversation to query for attachments",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "recipientId",
                        "description": "UUID of recipient to query for attachments",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "messageId",
                        "description": "UUID of message to query for attachments",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attachments"
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Attachment` entities."
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:video_rooms"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:video_rooms"
                        ]
                    }
                ],
                "operationId": "getAttachments",
                "summary": "List All Attachments",
                "description": "Gets a list of all `Attachment` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `Attachment` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attachment"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Attachments"
                ],
                "responses": {
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attachment"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "create:attachment"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "create:attachment"
                        ]
                    }
                ],
                "operationId": "createAttachment",
                "summary": "Create Attachment",
                "description": "Creates a new instance of a `Attachment`."
            }
        },
        "/attachments/{attachmentId}": {
            "summary": "Path used to manage a single Attachment.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Attachment`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "Attachments"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attachment"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Attachment`."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "update:attachment"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "update:attachment"
                        ]
                    }
                ],
                "operationId": "getAttachmentById",
                "summary": "Get a Attachment",
                "description": "Gets the details of a single instance of a `Attachment`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Attachment` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attachment"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Attachments"
                ],
                "responses": {
                    "404": {
                        "description": "Not Found"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attachment"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "delete:attachment"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "delete:attachment"
                        ]
                    }
                ],
                "operationId": "updateAttachment",
                "summary": "Update a Attachment",
                "description": "Updates an existing `Attachment`."
            },
            "parameters": [
                {
                    "name": "attachmentId",
                    "description": "A unique identifier for a `Attachment`.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/attachments/{attachmentId}/download": {
            "summary": "Attachment Download Resource",
            "get": {
                "tags": [
                    "Attachments"
                ],
                "parameters": [
                    {
                        "name": "attachmentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "stream",
                        "description": "If true, the artifact will be downloaded in its original format. Content-type headers will be set to specify type of download.",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    },
                    {
                        "name": "thumbnail",
                        "description": "If true, returns the thumbnail version of the attachment",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "301": {
                        "headers": {
                            "Location": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Redirect URL to download attachment content"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "403": {
                        "description": "Invalid magic token"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:attachments"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:attachments"
                        ]
                    }
                ],
                "operationId": "downloadAttachment",
                "summary": "Download Attachment",
                "description": "Generates or streams the attachment specified by `attachmentId` path parameter"
            }
        },
        "/videorooms": {
            "summary": "Path used to manage the list of videorooms.",
            "description": "The REST endpoint/path used to list and create zero or more `VideoRoom` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "Video"
                ],
                "parameters": [
                    {
                        "name": "conversationId",
                        "description": "Scope results to matching conversation.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "status",
                        "description": "Filter results based on VideoRoom status",
                        "schema": {
                            "enum": [
                                "active",
                                "closed"
                            ],
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoRooms"
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `VideoRoom` entities."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Agency Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:video_rooms"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:video_rooms"
                        ]
                    }
                ],
                "operationId": "getVideoRooms",
                "summary": "List All Video Rooms",
                "description": "Gets a list of all `VideoRoom` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `VideoRoom` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VideoRoom"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Video"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Agency not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid or malformed request"
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoRoom"
                                }
                            }
                        },
                        "description": "Successful response."
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "create:video_room"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "create:video_room"
                        ]
                    }
                ],
                "operationId": "createVideoRoom",
                "summary": "Create a VideoRoom",
                "description": "Creates a new instance of a `VideoRoom`."
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/videorooms/{roomId}": {
            "summary": "Path used to manage a single VideoRoom.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `VideoRoom`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "Video"
                ],
                "parameters": [
                    {
                        "name": "roomId",
                        "description": "A unique identifier for a `VideoRoom`.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoRoom"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `VideoRoom`."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:video_rooms"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:video_rooms"
                        ]
                    }
                ],
                "operationId": "getVideoRoomById",
                "summary": "Get a VideoRoom",
                "description": "Gets the details of a single instance of a `VideoRoom`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `VideoRoom` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VideoRoom"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Video"
                ],
                "responses": {
                    "202": {
                        "description": "Successful response."
                    }
                },
                "operationId": "updateVideoRoom",
                "summary": "Update a VideoRoom",
                "description": "Updates an existing `VideoRoom`."
            },
            "delete": {
                "tags": [
                    "Video"
                ],
                "parameters": [
                    {
                        "name": "roomId",
                        "description": "A unique identifier for a `VideoRoom`.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoRoom"
                                }
                            }
                        },
                        "description": "Video Room Closed"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "update:video_room",
                            "delete:video_room"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "update:video_room",
                            "delete:video_room"
                        ]
                    }
                ],
                "operationId": "closeVideoRoom",
                "summary": "Delete a VideoRoom",
                "description": "Closes an existing in-progress `VideoRoom`."
            },
            "parameters": [
                {
                    "name": "roomId",
                    "description": "A unique identifier for a `VideoRoom`.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/videorooms/{roomId}/tokens": {
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VideoRoomToken"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Video"
                ],
                "parameters": [
                    {
                        "name": "roomId",
                        "description": "Room ID to create access token for.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoRoomToken"
                                }
                            }
                        },
                        "description": "Access token created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:video_rooms"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:video_rooms"
                        ]
                    }
                ],
                "operationId": "createVideoRoomToken",
                "summary": "Create Video Room Access Token",
                "description": "Creates an access token to join a video room."
            }
        },
        "/artifacts/{artifactId}/download": {
            "get": {
                "tags": [
                    "Artifacts"
                ],
                "parameters": [
                    {
                        "name": "artifactId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "openid-security-scheme": [
                        ]
                    }
                ],
                "operationId": "downloadArtifact",
                "summary": "Download Evidence Artifact",
                "description": "Downloads the evidence artifact specified by `artifactId` in the path."
            },
            "parameters": [
                {
                    "name": "artifactId",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/users/me/templates": {
            "get": {
                "tags": [
                    "Users",
                    "Templates"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "description": "Query to search message templates",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "templateType",
                        "description": "Specifies the types of templates to return.",
                        "schema": {
                            "enum": [
                                "agency",
                                "user",
                                "all"
                            ],
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageTemplates"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:currentuser:templates"
                        ]
                    }
                ],
                "operationId": "getUserMessageTemplates",
                "summary": "Get User Message Templates",
                "description": "Returns a list of `MessageTemplate`s associated with the current user, identified by their JWT. If `x-agency-id` header is included in the request the agency's templates are included in the response."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageTemplate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Users",
                    "Templates"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageTemplate"
                                }
                            }
                        },
                        "description": "Template Created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-authorization-code-scheme": [
                            "create:currentuser:template"
                        ]
                    }
                ],
                "operationId": "createUserMessageTemplate",
                "summary": "Create User Message Template",
                "description": "Creates a quick reply message template associated with the user."
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/users/me/templates/{templateId}": {
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageTemplate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Users",
                    "Templates"
                ],
                "parameters": [
                    {
                        "name": "templateId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageTemplate"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-authorization-code-scheme": [
                            "update:currentuser:template"
                        ]
                    }
                ],
                "operationId": "updateUserMessageTemplate",
                "summary": "Update User Message Template",
                "description": "Updates the user's message template specified by `templateId` on the path."
            },
            "delete": {
                "tags": [
                    "Users",
                    "Templates"
                ],
                "parameters": [
                    {
                        "name": "templateId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-authorization-code-scheme": [
                            "update:currentuser:template"
                        ]
                    }
                ],
                "operationId": "deleteUserMessageTemplate",
                "summary": "Delete User Message Template",
                "description": "Deletes the user's message template specified by `templateId` on the path."
            }
        },
        "/artifacts/{artifactId}/share": {
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ArtifactShare"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Artifacts"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MagicToken"
                                }
                            }
                        },
                        "description": "Shared successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server error"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "openid-security-scheme": [
                        ]
                    }
                ],
                "operationId": "shareArtifact",
                "summary": "Share Artifact",
                "description": "Shares magic token link to specified recipient."
            },
            "parameters": [
                {
                    "name": "artifactId",
                    "description": "UUID of artifact",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/users/{userId}/link/{childId}": {
            "post": {
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "childId",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User identity linked."
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "link:user"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "link:user"
                        ]
                    }
                ],
                "operationId": "linkUserIdentity",
                "summary": "Link User Identity",
                "description": "Links the child user ID with the entity specified as `userId` on the path"
            }
        },
        "/videorooms/{roomId}/participants": {
            "summary": "Resource for video room participants",
            "get": {
                "tags": [
                    "Video"
                ],
                "parameters": [
                    {
                        "name": "roomId",
                        "description": "UUID of video room",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "participantStatus",
                        "description": "Scope response to connection status",
                        "schema": {
                            "enum": [
                                "connected",
                                "disconnected"
                            ],
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoRoomParticipants"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "description": "Video room not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server error"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "update:video_room"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "update:video_room"
                        ]
                    }
                ],
                "operationId": "getVideoRoomParticipants",
                "summary": "Get Video Room Participants",
                "description": "Returns a list of participants for the specified video room."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VideoRoomParticipant"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Video"
                ],
                "parameters": [
                    {
                        "name": "roomId",
                        "description": "UUID of video room",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoRoomParticipant"
                                }
                            }
                        },
                        "description": "Participant added"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "create:video_room"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "create:video_room"
                        ]
                    }
                ],
                "operationId": "addVideoRoomParticipant",
                "summary": "Add Video Room Participant",
                "description": "Adds the participant to the specified video room."
            },
            "parameters": [
                {
                    "name": "roomId",
                    "description": "UUID of video room",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/conversations/{conversationId}/assign/{userId}": {
            "summary": "Resource URI for assigning and unassigning agents to a conversation",
            "put": {
                "tags": [
                    "Conversations"
                ],
                "parameters": [
                    {
                        "name": "conversationId",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "userId",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of agency to bind to conversation request",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conversation Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error."
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Conversation"
                                }
                            }
                        },
                        "description": "Agent assigned"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conversation is already assigned"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "assign:conversation"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "assign:conversation"
                        ]
                    }
                ],
                "operationId": "assignConversationAgent",
                "summary": "Assign Agent to Conversation",
                "description": "Assigns the user as agent on the specified conversation."
            },
            "delete": {
                "tags": [
                    "Conversations"
                ],
                "parameters": [
                    {
                        "name": "conversationId",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "userId",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of agency to bind to conversation request",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conversation not found."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server error"
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Conversation"
                                }
                            }
                        },
                        "description": "Agent Unassigned"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "unassign:conversation"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "unassign:conversation"
                        ]
                    }
                ],
                "operationId": "unassignConversationAgent",
                "summary": "Unassign Agent from Conversation",
                "description": "Unassigns the user on the specified conversation."
            },
            "parameters": [
                {
                    "name": "conversationId",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "userId",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "x-agency-id",
                    "description": "UUID of agency to bind to conversation request",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/text_translate": {
            "get": {
                "tags": [
                    "Translation"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Dialects"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                        ],
                        "oauth2-authorization-code-scheme": [
                        ]
                    }
                ],
                "operationId": "getSupportedLanguages",
                "summary": "Get Supported Languages",
                "description": "Returns a list of languages supported for translation."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TranslationDetection"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Translation"
                ],
                "parameters": [
                    {
                        "name": "min_threshold",
                        "description": "The minimum threshold for returning detection results",
                        "schema": {
                            "type": "number"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TranslationResults"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                        ],
                        "oauth2-authorization-code-scheme": [
                        ]
                    }
                ],
                "operationId": "textTranslateDetect",
                "summary": "Detect Language",
                "description": "Detects the language of the input text."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Translation"
                            },
                            "examples": {
                                "Translation Request": {
                                    "value": {
                                        "input_text": "And that's hard because you don't want to inject an artificial pause because you might chop the sentence in half",
                                        "output_dialect": "es"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Translation"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TranslationResults"
                                },
                                "examples": {
                                    "Translate Text": {
                                        "value": [
                                            {
                                                "detected_dialect": "en",
                                                "input_text": "And that's hard because you don't want to inject an artificial pause because you might chop the sentence in half",
                                                "provider": "azure",
                                                "output_text": "Y eso es difícil porque no quieres inyectar una pausa artificial porque podrías cortar la oración por la mitad.",
                                                "output_dialect": "es",
                                                "detected_confidence": 1
                                            },
                                            {
                                                "detected_dialect": "en",
                                                "provider": "google",
                                                "output_text": "Y eso es difícil porque no quieres inyectar una pausa artificial porque podrías cortar la oración por la mitad.",
                                                "output_dialect": "en",
                                                "detected_confidence": 1,
                                                "input_text": "And that's hard because you don't want to inject an artificial pause because you might chop the sentence in half"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                        ],
                        "oauth2-authorization-code-scheme": [
                        ]
                    }
                ],
                "operationId": "textTranslate",
                "summary": "Translate Text",
                "description": "Translates the specified text into the specified output language"
            }
        },
        "/contacts": {
            "summary": "Path used to manage the list of contacts.",
            "description": "The REST endpoint/path used to list and create zero or more `Contact` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "Contact"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of the associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "name",
                        "description": "Search by first name, last name or nickname",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "number",
                        "description": "Search by recipient number of the contact.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Contacts"
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Contact` entities."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:contacts"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:contacts"
                        ]
                    }
                ],
                "operationId": "getContacts",
                "summary": "List All Contacts",
                "description": "Gets a list of all `Contact` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `Contact` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Contact"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Contact"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of the associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Contact"
                                }
                            }
                        },
                        "description": "Successful response."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "create:contact"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "create:contact"
                        ]
                    }
                ],
                "operationId": "createContact",
                "summary": "Create a Contact",
                "description": "Creates a new instance of a `Contact`."
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "UUID of the associated agency",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/contacts/{contactId}": {
            "summary": "Path used to manage a single Contact.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Contact`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "Contact"
                ],
                "parameters": [
                    {
                        "name": "contactId",
                        "description": "A unique identifier for a `Contact`.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Contact"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Contact`."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:contacts"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:contacts"
                        ]
                    }
                ],
                "operationId": "getContactById",
                "summary": "Get a Contact by ID",
                "description": "Gets the details of a single instance of a `Contact`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Contact` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Contact"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Contact"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "contactId",
                        "description": "A unique identifier for a `Contact`.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Contact"
                                }
                            }
                        },
                        "description": "Updated"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "update:contact"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "update:contact"
                        ]
                    }
                ],
                "operationId": "updateContact",
                "summary": "Update a Contact",
                "description": "Updates an existing `Contact`."
            },
            "delete": {
                "tags": [
                    "Contact"
                ],
                "parameters": [
                    {
                        "name": "contactId",
                        "description": "A unique identifier for a `Contact`.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "delete:contact"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "delete:contact"
                        ]
                    }
                ],
                "operationId": "deleteContact",
                "summary": "Delete a Contact",
                "description": "Deletes an existing `Contact`."
            },
            "parameters": [
                {
                    "name": "contactId",
                    "description": "A unique identifier for a `Contact`.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/agencies/{agencyId}/providers/{resourceIdOrProviderId}": {
            "get": {
                "tags": [
                    "Provider"
                ],
                "parameters": [
                    {
                        "name": "resourceIdOrProviderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "operationId": "getProviderById",
                "summary": "Get Provider by ID or Resource ID",
                "description": "Returns a `Provider` object associated by ID. Can be specified as `resource_id (String)` or `provider_id (UUID)`"
            },
            "parameters": [
                {
                    "name": "agencyId",
                    "in": "path",
                    "required": true
                },
                {
                    "name": "resourceIdOrProviderId",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/messages/{messageId}/status": {
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageStatus"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Messages"
                ],
                "parameters": [
                    {
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageStatus"
                                }
                            }
                        },
                        "description": "Status updated"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "update:message:status"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "update:message:status"
                        ]
                    }
                ],
                "operationId": "updateMessageStatus",
                "summary": "Update Message Status",
                "description": "Updates the message delivery status"
            },
            "parameters": [
                {
                    "name": "messageId",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/transcribe": {
            "get": {
                "tags": [
                    "Transcribe"
                ],
                "parameters": [
                    {
                        "name": "conversationId",
                        "description": "Scope transcriptions by conversation ID",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "x-agency-id",
                        "description": "Associated agency ID",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Transcription"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "getTranscriptionSessions",
                "summary": "Get Transcription Sessions",
                "description": "Returns an array of transcription sessions."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Transcription"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Transcribe"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "Associated agency ID",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Transcription"
                                }
                            }
                        },
                        "description": "Transcription Session Created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server list"
                    }
                },
                "operationId": "createTranscriptionSession",
                "summary": "Create New Transcription Session",
                "description": "Creates a new session for transcription and returns the associated `Transcription` object"
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "Associated agency ID",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/transcribe/{sessionId}": {
            "get": {
                "tags": [
                    "Transcribe"
                ],
                "parameters": [
                    {
                        "name": "sessionId",
                        "description": "Transcription session ID",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "Associated agency ID",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Transcription"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "getTranscriptionSession",
                "summary": "Get Transcription Session",
                "description": "Returns the specified `Transcription` session."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Transcription"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Transcribe"
                ],
                "parameters": [
                    {
                        "name": "sessionId",
                        "description": "Transcription session ID",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "Associated agency ID",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Transcription"
                                }
                            }
                        },
                        "description": "Transcription Updated"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "updateTranscriptionSession",
                "summary": "Update Transcription Session",
                "description": "Updates the specified transcription session."
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "Associated agency ID",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                },
                {
                    "name": "sessionId",
                    "description": "Transcription session ID",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/videorooms/{roomId}/participants/{participantId}": {
            "get": {
                "tags": [
                    "Video"
                ],
                "parameters": [
                    {
                        "name": "roomId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "participantId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoRoomParticipant"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Participant not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "operationId": "getVideoRoomParticipant",
                "summary": "Get Video Room Participant",
                "description": "Returns the specified participant from the specified video room."
            },
            "delete": {
                "tags": [
                    "Video"
                ],
                "parameters": [
                    {
                        "name": "roomId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "participantId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "404": {
                        "description": "Video room or participant not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server error"
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VideoRoomParticipant"
                                }
                            }
                        },
                        "description": "Participant deleted"
                    }
                },
                "operationId": "deleteVideoRoomParticipant",
                "summary": "Delete Video Room Participant",
                "description": "Removes the participant from the specified video room."
            },
            "parameters": [
                {
                    "name": "roomId",
                    "in": "path",
                    "required": true
                },
                {
                    "name": "participantId",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/invitations": {
            "get": {
                "tags": [
                    "Users",
                    "Invitations"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "fulfilled",
                        "description": "Scopes results to fulfilled true/false",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    },
                    {
                        "name": "userEmail",
                        "description": "Scopes results to invitations sent to the specified user email address",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invitations"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "getUserInvitations",
                "summary": "Get User Invitations",
                "description": "Returns an array of user invitations"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Invitation"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Users",
                    "Invitations"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invitation"
                                }
                            }
                        },
                        "description": "Invitation created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "inviteUser",
                "summary": "Invite User to Join Tenant",
                "description": "Sends a user invitation to join the tenant"
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/invitations/{inviteId}": {
            "get": {
                "tags": [
                    "Users",
                    "Invitations"
                ],
                "parameters": [
                    {
                        "name": "inviteId",
                        "description": "ID of the invitation to be revoked",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invitation"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "getUserInvitation",
                "summary": "Get a User Invitation",
                "description": "Returns the `Invitation` associated with the specified ID."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Users",
                    "Invitations"
                ],
                "parameters": [
                    {
                        "name": "inviteId",
                        "description": "ID of the invitation to be revoked",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "Invitation fulfilled, user created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server error"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not found"
                    }
                },
                "operationId": "fulfillUserInvitation",
                "summary": "Fulfill User Invitation",
                "description": "Creates a user based on the invite ID provided."
            },
            "delete": {
                "tags": [
                    "Users",
                    "Invitations"
                ],
                "parameters": [
                    {
                        "name": "inviteId",
                        "description": "Invitation UUID",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Invitation revoked"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "revokeUserInvitation",
                "summary": "Revoke a User Invitation",
                "description": "Revokes and removes access to the invited user."
            },
            "parameters": [
                {
                    "name": "inviteId",
                    "description": "ID of the invitation to be revoked",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/invitations/{inviteId}/resend": {
            "post": {
                "tags": [
                    "Users",
                    "Invitations"
                ],
                "parameters": [
                    {
                        "name": "inviteId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invitation"
                                }
                            }
                        },
                        "description": "Invitation resent"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "resendUserInvitation",
                "summary": "Resend User Invitation",
                "description": "Resends the user invitation email."
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/recipients/{numberOrId}/geolocations/{locationId}": {
            "get": {
                "tags": [
                    "Recipients",
                    "Locations"
                ],
                "parameters": [
                    {
                        "name": "numberOrId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "locationId",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GeoLocation"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "getRecipientLocationById",
                "summary": "Get Recipient Geolocation by ID",
                "description": "Returns the GeoLocation specified by `locationId`"
            },
            "parameters": [
                {
                    "name": "numberOrId",
                    "in": "path",
                    "required": true
                },
                {
                    "name": "locationId",
                    "in": "path",
                    "required": true
                },
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/recipients/{numberOrId}/geolocations": {
            "get": {
                "tags": [
                    "Recipients",
                    "Locations"
                ],
                "parameters": [
                    {
                        "name": "conversationId",
                        "description": "If set, returns the recipient's geolocations during the duration of the specified conversation.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "numberOrId",
                        "description": "UUID of the `Recipient` to query",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "limit",
                        "description": "Limit total number of results",
                        "schema": {
                            "type": "number"
                        },
                        "in": "query"
                    },
                    {
                        "name": "offset",
                        "description": "Return results starting with offset",
                        "schema": {
                            "type": "number"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GeoLocations"
                                }
                            }
                        },
                        "description": "Recipient geolocations"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Recipient not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "read:recipient:geolocations"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "read:recipient:geolocations"
                        ]
                    }
                ],
                "operationId": "getRecipientGeolocations",
                "summary": "Get Recipient Geolocations",
                "description": "Returns an array of `Geolocation`s associated to the recipient. "
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GeoLocation"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Recipients",
                    "Locations"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of agency associated with the request.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "numberOrId",
                        "description": "UUID of the `Recipient` to query",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GeoLocation"
                                }
                            }
                        },
                        "description": "New Recipient Geolocation Created"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Recipient not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "304": {
                        "description": "Geolocation has not changed."
                    }
                },
                "security": [
                    {
                        "oauth2-client-credentials-scheme": [
                            "create:recipient:geolocation"
                        ],
                        "oauth2-authorization-code-scheme": [
                            "create:recipient:geolocation"
                        ]
                    }
                ],
                "operationId": "addRecipientGeolocation",
                "summary": "Add Recipient Geolocation",
                "description": "Adds a new geolocation to the recipient."
            },
            "parameters": [
                {
                    "name": "numberOrId",
                    "description": "UUID of the `Recipient` to query",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/tcc/sessions": {
            "get": {
                "tags": [
                    "TCC"
                ],
                "parameters": [
                    {
                        "name": "cpn",
                        "description": "Filter results by calling party phone number.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "conversationId",
                        "description": "Filter results by conversation ID",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "sessionName",
                        "description": "Filter results by TCC session name.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "status",
                        "description": "Filter results by session status.",
                        "schema": {
                            "enum": [
                                "active",
                                "closed"
                            ],
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "orderBy",
                        "description": "Order results by specified parameter.",
                        "schema": {
                            "enum": [
                                "created_at",
                                "updated_at"
                            ],
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "orderDir",
                        "description": "Sort result direction",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "limit",
                        "description": "Specifies number of results to return.",
                        "schema": {
                            "type": "number"
                        },
                        "in": "query"
                    },
                    {
                        "name": "offset",
                        "description": "Return results beginning at the specified offset.",
                        "schema": {
                            "type": "number"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TCCSessions"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Agency not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "getTCCSessions",
                "summary": "Get TCC Sessions",
                "description": "Returns an array of `TCCSession` 911 sessions."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TCCSession"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "TCC"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TCCSession"
                                }
                            }
                        },
                        "description": "Session created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Agency not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "createTCCSession",
                "summary": "Create TCC Session",
                "description": "Creates a new TCC session."
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/tcc/sessions/{sessionId}": {
            "get": {
                "tags": [
                    "TCC"
                ],
                "parameters": [
                    {
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TCCSession"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Session not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "getTCCSession",
                "summary": "Get TCC Session",
                "description": "Returns a `TCCSession` specified by `sessionId`"
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TCCSession"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "TCC"
                ],
                "parameters": [
                    {
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TCCSession"
                                }
                            }
                        },
                        "description": "Session updated"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Session not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "operationId": "updateTCCSession",
                "summary": "Update TCC Session",
                "description": "Updates the specified TCC session"
            },
            "delete": {
                "tags": [
                    "TCC"
                ],
                "parameters": [
                    {
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TCCSession"
                                }
                            }
                        },
                        "description": "Session closed"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Session not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "closeTCCSession",
                "summary": "Close TCC Session",
                "description": "Closes the specified TCC session."
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                },
                {
                    "name": "sessionId",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/tcc/sessions/{sessionId}/transfer/{psapId}": {
            "post": {
                "tags": [
                    "TCC"
                ],
                "parameters": [
                    {
                        "name": "sessionId",
                        "description": "UUID of TCC session",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "psapId",
                        "description": "Destination PSAP identifier.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TCCSession"
                                }
                            }
                        },
                        "description": "Request accepted for transfer."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Session or PSAP ID not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "transferTccSession",
                "summary": "Transfer TCC Session",
                "description": "Transfers the TCC session to the specified PSAP ID."
            },
            "parameters": [
                {
                    "name": "psapId",
                    "description": "Destination PSAP identifier.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "sessionId",
                    "description": "UUID of TCC session",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/tcc/transfer_points": {
            "get": {
                "tags": [
                    "TCC"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "psapName",
                        "description": "Filter results by PSAP name.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "psapState",
                        "description": "Filter results by PSAP state.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "psapZipcode",
                        "description": "Filter results by PSAP zip code.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TCCTransferPoints"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Agency ID not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "getTCCTransferPoints",
                "summary": "Get TCC Transfer Points",
                "description": "Returns a list of available PSAPs for TCC transfer"
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/tcc/sessions/{sessionId}/rebid": {
            "get": {
                "tags": [
                    "TCC"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GeoLocation"
                                }
                            }
                        },
                        "description": "Rebid OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Session or location not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "rebidTccSessionLocation",
                "summary": "Rebid TCC Session Location",
                "description": "Request updated caller location from active TCC session."
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                },
                {
                    "name": "sessionId",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/conversations/{conversationId}/recipients": {
            "get": {
                "tags": [
                    "Conversations",
                    "Recipients"
                ],
                "parameters": [
                    {
                        "name": "conversationId",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of the associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recipients"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conversation Not Found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "getConversationRecipients",
                "summary": "Get Conversation Recipients",
                "description": "Returns an array of recipients assigned to the conversation."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Recipient"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Recipients",
                    "Conversations"
                ],
                "parameters": [
                    {
                        "name": "conversationId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of the associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recipient"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conversation not found"
                    }
                },
                "operationId": "addRecipientToConversation",
                "summary": "Add Recipient to Conversation",
                "description": "Adds the specified recipient to the conversation"
            },
            "parameters": [
                {
                    "name": "conversationId",
                    "in": "path",
                    "required": true
                },
                {
                    "name": "x-agency-id",
                    "description": "UUID of the associated agency.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/conversations/{conversationId}/recipients/{recipientId}": {
            "delete": {
                "tags": [
                    "Recipients",
                    "Conversations"
                ],
                "parameters": [
                    {
                        "name": "conversationId",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "recipientId",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recipient"
                                }
                            }
                        },
                        "description": "Recipient Removed"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Conversation or recipient not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "operationId": "removeRecipientFromConversation",
                "summary": "Remove Recipient from Conversation",
                "description": "Removes the specified recipient from the conversation"
            },
            "parameters": [
                {
                    "name": "conversationId",
                    "in": "path",
                    "required": true
                },
                {
                    "name": "recipientId",
                    "in": "path",
                    "required": true
                },
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/metadata/{objectType}/{objectId}": {
            "get": {
                "tags": [
                    "Metadata"
                ],
                "parameters": [
                    {
                        "name": "objectType",
                        "description": "The type of object for which the metadata is associated",
                        "schema": {
                            "enum": [
                                "conversations",
                                "agencies",
                                "messages"
                            ],
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "objectId",
                        "description": "UUID of the associated object",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Metadata"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not found"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "getObjectMetadata",
                "summary": "Get Object Metadata",
                "description": "Returns the metadata for the specified object type and UUID."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Metadata"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Metadata"
                ],
                "parameters": [
                    {
                        "name": "objectType",
                        "description": "Type of object for which metadata is being created.",
                        "schema": {
                            "enum": [
                                "conversation",
                                "message",
                                "agency"
                            ],
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "objectId",
                        "description": "UUID of object for which metadata is being created.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Metadata"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "updateObjectMetadata",
                "summary": "Update Object Metadata",
                "description": "Update metadata for the specified object"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Metadata"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Metadata"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "objectId",
                        "description": "UUID of the object for which the metadata is being created.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "objectType",
                        "description": "The type of object for which the metadata is being created.",
                        "schema": {
                            "enum": [
                                "conversations",
                                "agencies",
                                "messages"
                            ],
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Metadata"
                                }
                            }
                        },
                        "description": "Metadata created"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "createObjectMetadata",
                "summary": "Create Object Metadata",
                "description": "Creates new metadata for the specified object."
            },
            "parameters": [
                {
                    "name": "objectType",
                    "description": "Type of object for which metadata is being created.",
                    "schema": {
                        "enum": [
                            "conversations",
                            "agencies",
                            "messages"
                        ],
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "objectId",
                    "description": "UUID of object for which metadata is being created.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/recipients/{numberOrId}/dialect/{language}": {
            "put": {
                "tags": [
                    "Recipients",
                    "Translation"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "numberOrId",
                        "description": "Recipient ID, may be specified as 10DLC (with or without country code), UUID or unique voice fingerprint.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "language",
                        "description": "The 2 digit language code.",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Recipient"
                                }
                            }
                        },
                        "description": "Recipient language updated"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Recipient not found"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid language code specified."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    },
                    "304": {
                        "description": "No changes"
                    }
                },
                "operationId": "updateRecipientLanguage",
                "summary": "Update Recipient Language",
                "description": "Updates the preferred language of the recipient."
            },
            "parameters": [
                {
                    "name": "numberOrId",
                    "description": "Recipient ID, may be specified as 10DLC (with or without country code), UUID or unique voice fingerprint.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                },
                {
                    "name": "language",
                    "description": "The 2 digit language code.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/tcc/transfer_points/{psapId}": {
            "get": {
                "tags": [
                    "TCC"
                ],
                "parameters": [
                    {
                        "name": "psapId",
                        "description": "ID of PSAP transfer point",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TCCTransferPoint"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Transfer point not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "getTccTransferPoint",
                "summary": "Get TCC Transfer Point",
                "description": "Returns the TCC transfer point associated with `psapId`"
            },
            "parameters": [
                {
                    "name": "psapId",
                    "in": "path",
                    "required": true
                },
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/tcc/sessions/{sessionId}/transfer": {
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TCCTransferStatus"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "TCC"
                ],
                "parameters": [
                    {
                        "name": "sessionId",
                        "schema": {
                            "type": "string"
                        },
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TCCSession"
                                }
                            }
                        },
                        "description": "Session transfer status updated"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Session not found"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid request"
                    }
                },
                "operationId": "updateTccSessionTransfer",
                "summary": "Update TCC Transfer",
                "description": "Updates the specified TCC session transfer status."
            },
            "parameters": [
                {
                    "name": "sessionId",
                    "description": "TCC Session ID. May be specified as the unique UUID of socket ID.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/tokens/{token}/qrcode": {
            "get": {
                "tags": [
                    "Tokens"
                ],
                "parameters": [
                    {
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "image/png": {

                            }
                        },
                        "description": "QR code image"
                    },
                    "404": {
                        "description": "Token not found"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server Error"
                    }
                },
                "operationId": "getMagicTokenQrCode",
                "summary": "Get Magic Token QR Code",
                "description": "Returns the QR code for the URL specified in the associated `MagicToken`."
            },
            "parameters": [
                {
                    "name": "token",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/auth/{agencyId}/token": {
            "summary": "Resource for requesting and managing auth tokens",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthTokenRequest"
                            }
                        }
                    }
                },
                "tags": [
                    "Auth"
                ],
                "responses": {
                    "401": {
                        "description": "Client not authorized"
                    },
                    "404": {
                        "description": "Agency not found"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Invalid Request"
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthToken"
                                }
                            }
                        },
                        "description": "Token generated"
                    }
                },
                "operationId": "requestAuthToken",
                "summary": "Request Auth Token",
                "description": "Returns an authorization JWT token"
            },
            "parameters": [
                {
                    "name": "agencyId",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/geolocations": {
            "get": {
                "tags": [
                    "Locations"
                ],
                "parameters": [
                    {
                        "name": "x-agency-id",
                        "description": "UUID of associated agency",
                        "schema": {
                            "type": "string"
                        },
                        "in": "header",
                        "required": true
                    },
                    {
                        "name": "recipientId",
                        "description": "Scope the results by the specified recipient ID",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "recipientNumber",
                        "description": "Scope results by the specified recipient 10DLC number",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "conversationId",
                        "description": "Scope results to the specified conversation ID",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GeoLocations"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "operationId": "getGeolocations",
                "summary": "Get Geolocations",
                "description": "Returns an array of geolocations for the specified query"
            },
            "parameters": [
                {
                    "name": "x-agency-id",
                    "description": "UUID of associated agency",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        }
    },
    "components": {
        "schemas": {
            "Error": {
                "required": [
                    "code",
                    "message"
                ],
                "properties": {
                    "code": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "Agency": {
                "title": "Root Type for Agency",
                "description": "Object describing basic Agency.",
                "required": [
                ],
                "type": "object",
                "properties": {
                    "agency_name": {
                        "description": "Agency name.",
                        "type": "string",
                        "example": "Austin Texas"
                    },
                    "agency_domain": {
                        "description": "The primary email domain of the agency. Used to identify users when they log into the platform. ",
                        "type": "string",
                        "example": "austintexas.gov"
                    },
                    "resource_id": {
                        "type": "string"
                    },
                    "status": {
                        "description": "Agency tenant status.",
                        "enum": [
                            "pending",
                            "active",
                            "inactive"
                        ],
                        "type": "string",
                        "readOnly": false
                    },
                    "created_at": {
                        "format": "date-time",
                        "description": "Datetime at which the agency was created.",
                        "type": "string"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "description": "Datetime at which the agency was last updated.",
                        "type": "string"
                    },
                    "agency_id": {
                        "description": "Agency UUID",
                        "type": "string",
                        "readOnly": true
                    },
                    "region": {
                        "description": "Region assigned to the agency tenant.",
                        "enum": [
                            "us-east",
                            "us-west"
                        ],
                        "type": "string"
                    },
                    "environment": {
                        "description": "Environment status of the agency tenant.",
                        "enum": [
                            "sandbox",
                            "production"
                        ],
                        "type": "string"
                    },
                    "provider": {
                        "description": "Communications provider assigned to the agency tenant.",
                        "type": "string"
                    },
                    "provider_id": {
                        "description": "UUID of the communications provider assigned to the agency.",
                        "type": "string"
                    },
                    "provider_account_id": {
                        "description": "Account identifier for the agency's communications provider.",
                        "type": "string"
                    },
                    "provider_token": {
                        "description": "Access token of the agency's communications provider account.",
                        "type": "string"
                    },
                    "roles": {
                        "description": "A list of roles configured for the agency.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        }
                    }
                },
                "example": {
                    "agency_id": "67b243db-6c97-4dd0-97d6-3483b221257c",
                    "agency_name": "Austin Texas",
                    "agency_domain": "austintexas.gov",
                    "status": "active",
                    "provider_id": "abffad0d-964e-4b3e-bbcd-56dfb9f2249b",
                    "provider": "bandwidth",
                    "provider_account_id": "AC195b18aa39fd97f489fef605d88bb597",
                    "provider_token": "1d76637bffd072e3f9f1a1124a0ed992",
                    "default_agency": true,
                    "region": "us-west",
                    "environment": "production",
                    "created_at": "2022-01-12 22:34:05",
                    "updated_at": "2022-01-12 22:34:05"
                }
            },
            "Message": {
                "title": "Root Type for Message",
                "description": "JSON Message object",
                "required": [
                    "body",
                    "conversation_id",
                    "direction"
                ],
                "type": "object",
                "properties": {
                    "conversation_id": {
                        "writeOnly": false,
                        "description": "UUID of associated conversation.",
                        "type": "string",
                        "example": "ac466170-b77b-41c1-a28d-6bc549502cf9"
                    },
                    "message_id": {
                        "description": "Unique message UUID",
                        "type": "string",
                        "readOnly": true,
                        "example": "ac466170-b77b-41c1-a28d-6bc549502cf9"
                    },
                    "direction": {
                        "description": "Direction of travel for the associated message.",
                        "enum": [
                            "inbound",
                            "outbound"
                        ],
                        "type": "string",
                        "readOnly": true,
                        "example": "inbound"
                    },
                    "body": {
                        "description": "Body of message being sent or received",
                        "type": "string",
                        "example": "Hello, this is my first text/911 message!"
                    },
                    "language": {
                        "description": "Native language detected in the message body",
                        "maxLength": 5,
                        "minLength": 2,
                        "type": "string",
                        "readOnly": true,
                        "example": "en"
                    },
                    "status": {
                        "description": "Message delivery status. Only applicable to outbound messages.",
                        "type": "string",
                        "readOnly": false,
                        "example": "delivered"
                    },
                    "error_code": {
                        "description": "Error code returned by the provider network",
                        "type": "string",
                        "readOnly": true
                    },
                    "error_message": {
                        "description": "Error message returned by the provider network",
                        "type": "string",
                        "readOnly": true
                    },
                    "num_media": {
                        "format": "int32",
                        "description": "Number of media artifacts attached to the message. Only applies to MMS messages.",
                        "maximum": 6,
                        "minimum": 0,
                        "type": "integer",
                        "readOnly": true
                    },
                    "delivered_at": {
                        "format": "date-time",
                        "description": "Timestamp at which the message was delivered by the provider network",
                        "type": "string",
                        "readOnly": true
                    },
                    "created_at": {
                        "format": "date-time",
                        "description": "Timestamp at which the message was created",
                        "type": "string",
                        "readOnly": false,
                        "example": "2022-01-01T19:27:36.470Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "description": "Timestamp at which the message was last updated.",
                        "type": "string",
                        "readOnly": true,
                        "example": "2022-01-01T19:27:36.470Z"
                    },
                    "body_transl": {
                        "description": "Message body, translated according to specified language.",
                        "type": "string",
                        "readOnly": true
                    },
                    "recipient_id": {
                        "description": "UUID of the recipient on the message",
                        "maxLength": 36,
                        "minLength": 36,
                        "type": "string",
                        "readOnly": false
                    },
                    "conversation_status": {
                        "description": "Status of the associated conversation",
                        "type": "string",
                        "readOnly": true
                    },
                    "recipient_number": {
                        "description": "Phone number of the recipient",
                        "maxLength": 13,
                        "minLength": 10,
                        "type": "string",
                        "readOnly": false
                    },
                    "provider_number": {
                        "description": "The provider phone number on the conversation. ",
                        "type": "string",
                        "readOnly": true
                    },
                    "provider_number_id": {
                        "description": "UUID of the provider number on the message.",
                        "type": "string"
                    },
                    "message_body": {
                        "description": "The full message body, including translated text if such exists on the message",
                        "type": "string",
                        "readOnly": true
                    },
                    "operator": {
                        "description": "Name of operator that sent the message.",
                        "type": "string",
                        "readOnly": true
                    },
                    "operator_id": {
                        "description": "UUID of operator that sent the message.",
                        "type": "string",
                        "readOnly": true
                    },
                    "resource_id": {
                        "description": "The unique identifier assigned by the provider.",
                        "type": "string"
                    },
                    "source": {
                        "description": "Describes the source in which the message was received.",
                        "enum": [
                            "sms",
                            "voice",
                            "chat",
                            "transcribe",
                            "note"
                        ],
                        "type": "string"
                    },
                    "num_retries": {
                        "description": "Indicates the number of retry attempts to send a message",
                        "type": "number"
                    }
                },
                "example": {
                    "message_id": "e646cc67-4189-4af1-a6e1-17ffd7be4dee",
                    "conversation_id": "a6c0ca02-0284-4cf8-82a2-795ff069da3f",
                    "agency_id": "67b243db-6c97-4dd0-97d6-3483b221257c",
                    "recipient_id": "3e4d442f-9807-4008-ba1b-f70bb91253dc",
                    "provider_number": "8136994301",
                    "recipient_number": "4432501272",
                    "direction": "outbound",
                    "body": "Some new message",
                    "conversation_status": "active",
                    "status": "pending",
                    "created_at": "2022-02-01 17:25:28",
                    "updated_at": "2022-02-01 17:25:28"
                }
            },
            "ResponseMetadataObject": {
                "title": "Root Type for OpenApiResponseMetadata",
                "description": "JSON object containing response metadata such as pagination and request params.",
                "type": "object",
                "properties": {
                    "offset": {
                        "format": "int32",
                        "description": "Offset that was applied to the result list",
                        "minimum": 0,
                        "type": "integer",
                        "readOnly": true,
                        "example": ""
                    },
                    "limit": {
                        "format": "int32",
                        "description": "Limit that was applied to the result set",
                        "maximum": 100,
                        "type": "integer",
                        "readOnly": true
                    },
                    "total": {
                        "format": "int32",
                        "description": "Total number of results available",
                        "type": "integer",
                        "readOnly": true
                    }
                },
                "example": {
                    "offset": 0,
                    "limit": 25,
                    "total": 1
                }
            },
            "ResponseJsonContainer": {
                "title": "Root Type for OpenApiResponse",
                "description": "Standard JSON response object.",
                "required": [
                    "apiOperation",
                    "data",
                    "objectType",
                    "requestId"
                ],
                "type": "object",
                "properties": {
                    "requestId": {
                        "description": "Unique UUID associated with the request.",
                        "type": "string",
                        "readOnly": true,
                        "example": "ID-dev-1601653823139-0-6146606"
                    },
                    "apiOperation": {
                        "description": "Describes the OpenAPI operation that handled the request.",
                        "type": "string",
                        "readOnly": true,
                        "example": "getConversationById"
                    },
                    "objectType": {
                        "description": "Defines the type of object being returned in the `data` response.",
                        "enum": [
                            "Conversation",
                            "Message",
                            "Agency",
                            "User",
                            "Recipient"
                        ],
                        "type": "string",
                        "readOnly": true,
                        "example": "Conversation"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/ResponseMetadataObject",
                        "description": "Metadata associated with the response.",
                        "readOnly": true
                    },
                    "data": {
                        "$ref": "#/components/schemas/ResponseDataObject",
                        "description": "The response data object, according to the `objectType` specified."
                    }
                },
                "example": {
                    "requestId": "ID-dev-1601653823139-0-6146606",
                    "apiOperation": "getConversationById",
                    "objectType": "Conversation",
                    "metadata": {

                    },
                    "data": {

                    }
                }
            },
            "ResponseDataObject": {
                "oneOf": [
                    {
                        "type": "object"
                    },
                    {
                        "$ref": "#/components/schemas/Conversation"
                    },
                    {
                        "$ref": "#/components/schemas/Agency"
                    }
                ],
                "description": "The data object being returned in the OpenAPI response wrapper",
                "type": "object"
            },
            "Messages": {
                "description": "",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Message"
                },
                "example": [
                    {
                        "conversation_id": "1f71758c-c6c0-4469-b4b5-69da2b42e2fe",
                        "message_id": "481bb936-74f3-4247-bab1-5678184224cd",
                        "direction": "inbound",
                        "body": "Message goes here",
                        "language": "en",
                        "status": "delivered",
                        "num_media": 0,
                        "delivered_at": "2022-01-01T19:27:36.470Z",
                        "created_at": "2022-01-01T19:27:36.470Z",
                        "updated_at": "2022-01-01T19:27:36.470Z"
                    }
                ]
            },
            "Recipient": {
                "title": "Root Type for Recipient",
                "description": "A recipient or contact, with a phone number.",
                "required": [
                ],
                "type": "object",
                "properties": {
                    "recipient_id": {
                        "description": "Unique UUID of the recipient",
                        "type": "string"
                    },
                    "agency_id": {
                        "description": "UUID of the agency under which this recipient was created.",
                        "type": "string"
                    },
                    "label": {
                        "description": "Name or label of the recipient",
                        "type": "string"
                    },
                    "language": {
                        "description": "Preferred language dialect of the recipient",
                        "type": "string",
                        "example": "en-US"
                    },
                    "last_message_at": {
                        "format": "date-time",
                        "description": "Timestamp at which the recipient was last communicated with",
                        "type": "string"
                    },
                    "created_at": {
                        "format": "date-time",
                        "description": "Timestamp at which recipient was created",
                        "type": "string"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "description": "Timestamp at which the recipient was last updated",
                        "type": "string"
                    },
                    "number": {
                        "description": "Phone number of the recipient specified as either 10 digit US number or 13 digit international number.",
                        "maxLength": 13,
                        "minLength": 10,
                        "type": "string"
                    },
                    "canonical_language": {
                        "description": "The canonical language code of the recipient's preferred language.",
                        "type": "string",
                        "example": "en"
                    },
                    "fingerprint": {
                        "description": "Unique ID associated with voice biometric",
                        "type": "string"
                    },
                    "source": {
                        "description": "The source from which the recipient was created.",
                        "type": "string",
                        "example": "media,sms,voice"
                    }
                },
                "example": {
                    "recipient_id": "267a49e9-be38-40f0-a56c-d7db9a40dd27",
                    "agency_id": "d7db9a40dd27-be38-40f0-a56c-267a49e9",
                    "number": "2025551234",
                    "label": "John Smith",
                    "language": "en",
                    "last_message_at": "2022-01-25T22:12:14Z",
                    "created_at": "2022-01-25T22:12:14Z",
                    "updated_at": "2022-01-25T22:12:14Z"
                }
            },
            "MessageStatus": {
                "title": "Root Type for MessageStatus",
                "description": "Data object containing a subset of `Message` parameters.",
                "required": [
                    "status"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Message status indicator",
                        "type": "string",
                        "readOnly": false
                    },
                    "error_code": {
                        "type": "string",
                        "readOnly": false
                    },
                    "error_message": {
                        "type": "string",
                        "readOnly": false
                    },
                    "message_id": {
                        "description": "UUID of the message",
                        "type": "string",
                        "readOnly": true
                    },
                    "conversation_id": {
                        "description": "UUID of the message conversation",
                        "type": "string",
                        "readOnly": true
                    },
                    "num_segments": {
                        "description": "The number of segments to construct the message",
                        "type": "number"
                    },
                    "resource_id": {
                        "description": "Provider resource ID that identifies the message.",
                        "type": "string",
                        "readOnly": false
                    },
                    "num_retries": {
                        "description": "The number of retry attempts to send the message",
                        "type": "number"
                    }
                },
                "example": {
                    "conversation_id": "5956689d-9ae1-40eb-a75d-e6b4cb1b9189",
                    "resource_id": "SMa434be19b88c4de4892d7533e3046679",
                    "message_id": "8b3135df-d0ce-4581-bbe9-92665fdca102",
                    "num_segments": 2,
                    "status": "sent",
                    "num_retries": 1
                }
            },
            "Provider": {
                "description": "JSON data object describing communications providers",
                "type": "object",
                "properties": {
                    "provider_id": {
                        "description": "UUID of the provider",
                        "type": "string"
                    }
                }
            },
            "Conversations": {
                "description": "Array of Conversation objects",
                "type": "object"
            },
            "Translation": {
                "title": "Root Type for TranslateResult",
                "description": "Data object containing the result of a translation operation",
                "required": [
                    "input_text",
                    "output_dialect"
                ],
                "type": "object",
                "properties": {
                    "detected_dialect": {
                        "description": "The ISO code of the language detected in the input text, if `source_dialect` was specified as `auto`",
                        "maxLength": 5,
                        "minLength": 2,
                        "type": "string",
                        "readOnly": true
                    },
                    "detected_confidence": {
                        "description": "The confidence level of the detected language if `source_dialect` was specified as `auto`",
                        "type": "string"
                    },
                    "input_text": {
                        "description": "String of text to be translated",
                        "minLength": 0,
                        "type": "string"
                    },
                    "input_dialect": {
                        "description": "ISO 639-1 code of the source language dialect. If `source_dialect` is not specified it will be auto detected.",
                        "maxLength": 10,
                        "minLength": 2,
                        "type": "string",
                        "properties": {
                            "dialect": {
                                "type": "string"
                            },
                            "text": {
                                "type": "string"
                            },
                            "detected": {
                                "type": "string"
                            },
                            "confidence": {
                                "type": "string"
                            }
                        },
                        "example": "en"
                    },
                    "output_dialect": {
                        "description": "ISO 639-1 code for the language to be translated into. ",
                        "maxLength": 10,
                        "minLength": 2,
                        "type": "string",
                        "properties": {
                            "dialect": {
                                "type": "string"
                            },
                            "text": {
                                "type": "string"
                            }
                        }
                    },
                    "output_text": {
                        "description": "The translated text",
                        "type": "string",
                        "readOnly": true
                    },
                    "message_id": {
                        "description": "If specified, stores and associates the translation with the specified message ID.",
                        "type": "string"
                    }
                },
                "example": {
                    "input_dialect": "auto",
                    "input_text": "Wie geht es dir?",
                    "detected_dialect": "de",
                    "detected_confidence": ".98",
                    "output_dialect": "en",
                    "output_text": "How are you?"
                }
            },
            "Dialect": {
                "title": "Root Type for Dialect",
                "description": "Data object describing language dialect with translation capabilities.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "ISO 639-1 two-digit language code",
                        "type": "string"
                    },
                    "label": {
                        "description": "Standard english label of language",
                        "type": "string"
                    },
                    "original": {
                        "description": "Label in its original dialect",
                        "type": "string"
                    },
                    "capabilities": {
                        "enum": [
                            "speech",
                            "text"
                        ],
                        "type": "string",
                        "readOnly": false
                    },
                    "alias": {
                        "description": "Specifies the canonical language code to which this language is an alias of",
                        "type": "string"
                    },
                    "supports_text": {
                        "description": "True, if provider supports text translation.",
                        "type": "boolean"
                    },
                    "supports_speech": {
                        "description": "True, if provider supports speech translation",
                        "type": "boolean"
                    },
                    "providers": {
                        "$ref": "#/components/schemas/Object",
                        "description": "Array of providers and capabilities for the given dialect.",
                        "example": "{\n    \"google\": \"text\",\n    \"aws\": \"text,speech\"\n}"
                    },
                    "dialect_id": {
                        "description": "UUID of the given dialect.",
                        "type": "string"
                    }
                },
                "example": {
                    "code": "VI",
                    "label": "Vietnamese",
                    "original": "Tiếng Việt",
                    "capabilities": "text,voice"
                }
            },
            "Dialects": {
                "description": "Array of `Dialect` objects",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Dialect"
                }
            },
            "ProviderNumber": {
                "description": "Data object describing a phone number on the RCLive platform.",
                "required": [
                    "number_id"
                ],
                "type": "object",
                "properties": {
                    "number_id": {
                        "description": "Unique UUID for the number object",
                        "type": "string",
                        "readOnly": false
                    },
                    "agency_id": {
                        "description": "Agency UUID that owns the number",
                        "type": "string",
                        "readOnly": false
                    },
                    "number": {
                        "description": "Phone number",
                        "type": "string",
                        "readOnly": false
                    },
                    "label": {
                        "description": "The friendly name or label associated with the number.",
                        "type": "string",
                        "readOnly": false
                    },
                    "country_code": {
                        "description": "ISO country code of the number's registration",
                        "type": "string",
                        "readOnly": false
                    },
                    "vanity": {
                        "description": "Indicates if the number is used for masqauraded communications.",
                        "type": "boolean"
                    },
                    "inbound": {
                        "description": "If true, the number supports inbound conversations.",
                        "type": "boolean"
                    },
                    "outbound": {
                        "description": "If true, the number supports outbound conversations.",
                        "type": "boolean"
                    },
                    "preference": {
                        "description": "Specifies the preference in which numbers should be allocated for conversations.",
                        "type": "number"
                    }
                },
                "example": {
                    "number_id": "dd0270bc-4ef2-4106-bb81-8f2a8a338948",
                    "agency_id": "67b243db-6c97-4dd0-97d6-3483b221257c",
                    "number": "2025151234",
                    "label": "John Smith",
                    "country_code": "us",
                    "provider_id": "9a3874cd-0eef-48c0-ac39-b9c29e2d50a0",
                    "capabilities": [
                        "sms",
                        "mms"
                    ],
                    "created_at": "2022-01-12T22:34:06Z",
                    "updated_at": "2022-01-12T22:34:06Z"
                }
            },
            "ProviderNumbers": {
                "description": "List of [`Number`] objects",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ProviderNumber"
                }
            },
            "Recipients": {
                "description": "Array of `Recipient`",
                "type": "object"
            },
            "User": {
                "title": "Root Type for User",
                "description": "Basic User Object",
                "required": [
                    "email",
                    "fname",
                    "lname"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "description": "User's unique ID",
                        "type": "string",
                        "readOnly": true
                    },
                    "federated_id": {
                        "description": "The user's single-sign-on ID",
                        "type": "string"
                    },
                    "fname": {
                        "description": "First name of the user",
                        "type": "string"
                    },
                    "lname": {
                        "description": "Last name of the user",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email address associated with the user",
                        "type": "string"
                    },
                    "phone": {
                        "description": "Phone number of the user",
                        "type": "string"
                    },
                    "created_at": {
                        "format": "date-time",
                        "description": "Datetime at which user was created",
                        "type": "string",
                        "readOnly": true
                    },
                    "updated_at": {
                        "format": "date-time",
                        "description": "Datetime at which the user was last updated",
                        "type": "string"
                    },
                    "settings": {
                        "description": "Object containing user settings and preferences",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Setting"
                        },
                        "readOnly": false
                    },
                    "agencies": {
                        "description": "List of agencies that the user has access to.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Agency"
                        },
                        "readOnly": true
                    },
                    "default_agency": {
                        "$ref": "#/components/schemas/Agency",
                        "description": "The user's default agency affiliation.",
                        "readOnly": true
                    },
                    "send_invite": {
                        "writeOnly": true,
                        "description": "If true, sends user invitation email",
                        "type": "boolean"
                    },
                    "user_roles": {
                        "$ref": "#/components/schemas/UserRole",
                        "description": "Role permission level assigned to the user."
                    },
                    "roles": {
                        "writeOnly": true,
                        "description": "Write only. Used in update User payload to assign roles to a user.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        }
                    },
                    "password": {
                        "writeOnly": true,
                        "description": "Password reset for the associated user.",
                        "type": "string"
                    }
                },
                "example": {
                    "user_id": "267a49e9-be38-40f0-a56c-d7db9a40dd27",
                    "federated_id": "61a3ebbac49d580069262e68",
                    "fname": "John",
                    "lname": "Smith",
                    "email": "john.smith@email.com",
                    "phone": "443-250-1272",
                    "created_at": "2022-01-12 22:34:06",
                    "updated_at": "2022-01-12 22:34:06",
                    "settings": {

                    },
                    "agencies": [
                    ],
                    "default_agency": {

                    },
                    "roles": [
                        "admin",
                        "operator"
                    ]
                }
            },
            "Agencies": {
                "description": "Array of `Agency`",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Agency"
                }
            },
            "Users": {
                "description": "Array of `User`",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/User"
                }
            },
            "Session": {
                "title": "Root Type for Session",
                "description": "Data object describing a user session",
                "required": [
                    "socket_id"
                ],
                "type": "object",
                "properties": {
                    "session_id": {
                        "description": "Unique identifier for the session",
                        "type": "string",
                        "readOnly": true
                    },
                    "user_id": {
                        "description": "User ID associated to the session",
                        "type": "string"
                    },
                    "federated_id": {
                        "description": "Federated user ID associated to the session",
                        "type": "string",
                        "readOnly": true
                    },
                    "socket_id": {
                        "description": "The websocket ID associated with the session",
                        "type": "string"
                    },
                    "refresh_token": {
                        "description": "User refresh token stored with the session",
                        "type": "string"
                    },
                    "agency_id": {
                        "description": "UUID of the agency this session is attached to",
                        "type": "string",
                        "readOnly": true
                    },
                    "ttl": {
                        "format": "int32",
                        "description": "The remaining time-to-live of the session before it is considered to be expired",
                        "type": "integer",
                        "readOnly": true
                    },
                    "status": {
                        "description": "Session status",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "type": "string",
                        "readOnly": true
                    },
                    "created_at": {
                        "format": "date-time",
                        "description": "Datetime at which the session was created",
                        "type": "string",
                        "readOnly": true
                    },
                    "updated_at": {
                        "format": "date-time",
                        "description": "Datetime at which the session was last updated",
                        "type": "string",
                        "readOnly": true
                    }
                },
                "example": {
                    "session_id": "7eaa6821-7f61-4d44-a0ef-a1c3dd754cf1",
                    "user_id": "267a49e9-be38-40f0-a56c-d7db9a40dd27",
                    "federated_id": "61a3ebbac49d580069262e68",
                    "socket_id": "Im2qlKJMWbz_rUekAAAD",
                    "agency_id": "67b243db-6c97-4dd0-97d6-3483b221257c",
                    "ttl": 254,
                    "status": "active",
                    "created_at": "2022-01-25 16:35:55",
                    "updated_at": "2022-02-08 19:36:02"
                }
            },
            "Sessions": {
                "description": "Array of `Session`s",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Session"
                }
            },
            "Setting": {
                "required": [
                    "name",
                    "value",
                    "component"
                ],
                "properties": {
                    "name": {
                        "description": "Setting label",
                        "type": "string",
                        "readOnly": false
                    },
                    "value": {
                        "description": "Setting value",
                        "type": "string"
                    },
                    "namespace": {
                        "description": "The namespace of the setting. Internal use only.",
                        "type": "string",
                        "readOnly": true
                    },
                    "component": {
                        "description": "The component in which the setting controls",
                        "enum": [
                            "agency",
                            "user"
                        ],
                        "type": "string"
                    }
                },
                "example": {
                    "name": "twoFAForAll",
                    "value": "1",
                    "namespace": "default",
                    "component": "agency"
                }
            },
            "Settings": {
                "description": "Array of `Setting`s",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Setting"
                }
            },
            "AgencyProvider": {
                "title": "Root Type for AgencyProvider",
                "description": "Data object defining an agency's voice and messaging providers",
                "type": "object",
                "properties": {
                    "resource_id": {
                        "description": "Resource identifier linking the provider account",
                        "type": "string"
                    },
                    "provider_key": {
                        "description": "Identifier for provider account.",
                        "type": "string"
                    },
                    "provider_token": {
                        "description": "Access token for provider account",
                        "type": "string"
                    },
                    "status": {
                        "description": "Account status",
                        "type": "string"
                    },
                    "account_meta": {
                        "$ref": "#/components/schemas/Object",
                        "description": "Provider account metadata",
                        "readOnly": true
                    },
                    "provider": {
                        "description": "Name of the provider",
                        "type": "string"
                    },
                    "provider_account_id": {
                        "description": "Top-level account number or ID of provider account.",
                        "type": "string"
                    },
                    "agency_id": {
                        "description": "UUID of associated agency",
                        "type": "string"
                    }
                },
                "example": {
                    "agency_id": "abffad0d-964e-4b3e-bbcd-56dfb9f2249b",
                    "provider": "twilio",
                    "provider_account_id": "7593754",
                    "resource_id": "ACe8a3d6a90ca6b64b622547924b66d4f9",
                    "provider_key": "ACe8a3d6a90ca6b64b622547924b66d4f9",
                    "provider_token": "66f7585c1fe9b9cebe483b439d43a9bc",
                    "status": "active"
                }
            },
            "AgencyProviders": {
                "description": "Array of `AgencyProvider`s",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/AgencyProvider"
                }
            },
            "MessageTemplates": {
                "description": "Array of `MessageTemplate`s",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/MessageTemplate"
                }
            },
            "MessageTemplate": {
                "title": "Root Type for MessageTemplate2",
                "description": "Data object describing an agency message template.",
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "template_id": {
                        "description": "UUID of the message template",
                        "type": "string"
                    },
                    "agency_id": {
                        "description": "UUID of the belonging `Agency`",
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "description": "Name or label",
                        "type": "string"
                    },
                    "text": {
                        "description": "The content of the template",
                        "type": "string"
                    },
                    "created_at": {
                        "format": "date-time",
                        "description": "Datetime at which it was created",
                        "type": "string",
                        "readOnly": true
                    },
                    "updated_at": {
                        "format": "date-time",
                        "description": "Datetime at which the template was last updated",
                        "type": "string"
                    },
                    "status": {
                        "description": "Indicates the status of the template",
                        "enum": [
                            "active",
                            "draft",
                            "deleted"
                        ],
                        "type": "string",
                        "readOnly": true
                    },
                    "type": {
                        "description": "Type of message template.",
                        "enum": [
                            "user",
                            "agency"
                        ],
                        "type": "string",
                        "readOnly": true
                    }
                },
                "example": {
                    "template_id": "023c0608-3e8a-49fa-879e-d07223fe5a28",
                    "agency_id": "67b243db-6c97-4dd0-97d6-3483b221257c",
                    "name": "Responder On Scene",
                    "text": "A first responder has arrived on scene. Please make your way to the vehicle.",
                    "type": "agency",
                    "active": true,
                    "created_at": "2022-01-23 20:28:13",
                    "updated_at": "2022-01-23 20:28:13"
                }
            },
            "ConversationReply": {
                "description": "A simplified representation of the `Conversation` object, used for replying to a conversation in the outbound message direction.",
                "required": [
                    "message_body"
                ],
                "type": "object",
                "properties": {
                    "message_body": {
                        "description": "The body of the message reply.",
                        "type": "string"
                    },
                    "recipients": {
                        "description": "A list of recipient phone numbers to send the reply to. If not specified, defaults to sending the reply to all recipients on the conversation.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": "[\"+14107441832\"]"
                    },
                    "conversation_id": {
                        "description": "UUID of the associated conversation.",
                        "type": "string",
                        "readOnly": true
                    },
                    "agency_id": {
                        "description": "UUID of the agency that the conversation belongs to.",
                        "type": "string",
                        "readOnly": true
                    },
                    "message_id": {
                        "description": "UUID of the message reply. ",
                        "type": "string",
                        "readOnly": true
                    }
                },
                "example": {
                    "message_body": "Are you still there?",
                    "message_id": "dce01942-5edd-49ef-a0d6-b57d17d92aef",
                    "conversation_id": "ca28088d-10ea-47c2-bfe5-b8ea4ad2f260",
                    "recipients": [
                        "+14432501272"
                    ],
                    "agency_id": "67b243db-6c97-4dd0-97d6-3483b221257c"
                }
            },
            "Object": {
                "description": "Basic JSON Object",
                "type": "object"
            },
            "ProviderRecipient": {
                "title": "Root Type for Recipient",
                "description": "Data object containing a recipient record from an external provider.",
                "required": [
                    "provider_token"
                ],
                "type": "object",
                "properties": {
                    "recipient_id": {
                        "description": "Unique UUID of the recipient",
                        "type": "string"
                    },
                    "agency_id": {
                        "description": "UUID of the agency under which this recipient was created.",
                        "type": "string",
                        "readOnly": true
                    },
                    "label": {
                        "description": "Name or label of the recipient",
                        "type": "string"
                    },
                    "language": {
                        "description": "Preferred language dialect of the recipient",
                        "type": "string"
                    },
                    "last_message_at": {
                        "format": "date-time",
                        "description": "Timestamp at which the recipient was last communicated with",
                        "type": "string"
                    },
                    "created_at": {
                        "format": "date-time",
                        "description": "Timestamp at which recipient was created",
                        "type": "string"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "description": "Timestamp at which the recipient was last updated",
                        "type": "string"
                    },
                    "number": {
                        "description": "Phone number of the recipient specified as either 10 digit US number or 13 digit international number.",
                        "maxLength": 13,
                        "minLength": 10,
                        "type": "string",
                        "readOnly": true
                    },
                    "provider_id": {
                        "description": "UUID of provider from which the recipient was imported",
                        "type": "string",
                        "readOnly": true
                    },
                    "provider_token": {
                        "writeOnly": true,
                        "description": "Secret token issued by the provider to retrieve the recipient.",
                        "type": "string",
                        "readOnly": false
                    }
                },
                "example": {
                    "recipient_id": "267a49e9-be38-40f0-a56c-d7db9a40dd27",
                    "agency_id": "d7db9a40dd27-be38-40f0-a56c-267a49e9",
                    "number": "2025551234",
                    "label": "John Smith",
                    "language": "en",
                    "provider_id": "67b243db-6c97-4dd0-97d6-3483b221257c",
                    "provider_token": "dfgv768wegr0ow85ghfa97eigfi3479htw4590ghaero8fgh...",
                    "last_message_at": "2022-01-25T22:12:14Z",
                    "created_at": "2022-01-25T22:12:14Z",
                    "updated_at": "2022-01-25T22:12:14Z"
                }
            },
            "AgencyUser": {
                "title": "Root Type for AgencyUser",
                "description": "Object describing an agency user account.",
                "required": [
                ],
                "type": "object",
                "properties": {
                    "fname": {
                        "description": "First name",
                        "type": "string",
                        "readOnly": true
                    },
                    "lname": {
                        "description": "Last name",
                        "type": "string",
                        "readOnly": true
                    },
                    "email": {
                        "description": "User email",
                        "type": "string",
                        "readOnly": true
                    },
                    "phone": {
                        "description": "User phone number",
                        "type": "string",
                        "readOnly": true
                    },
                    "roles": {
                        "description": "Roles assigned to the user.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "user_id": {
                        "description": "UUID of the user",
                        "type": "string",
                        "readOnly": true
                    },
                    "agency_id": {
                        "description": "UUID of the agency",
                        "type": "string",
                        "readOnly": true
                    }
                },
                "example": {
                    "fname": "John",
                    "lname": "Smith",
                    "email": "john@email.com",
                    "user_id": "b0f65e3c-925b-4a23-9a46-201658eae5f1",
                    "agency_id": "9c2b4c5f-6058-4856-b95b-adde2141cbab",
                    "roles": [
                        "operator",
                        "agency-admin"
                    ]
                }
            },
            "AgencyUsers": {
                "description": "Array of `AgencyUser`",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/AgencyUser"
                }
            },
            "Artifact": {
                "title": "Root Type for Artifact",
                "description": "Data artifact",
                "required": [
                    "object_type",
                    "object_id"
                ],
                "type": "object",
                "properties": {
                    "artifact_id": {
                        "description": "UUID of the artifact",
                        "type": "string",
                        "readOnly": true
                    },
                    "uri": {
                        "description": "URI asset path to the stored artifact.",
                        "type": "string",
                        "readOnly": true
                    },
                    "content_type": {
                        "description": "The content type of the artifact.",
                        "type": "string",
                        "readOnly": true
                    },
                    "size": {
                        "format": "int32",
                        "description": "Size of the final data artifact.",
                        "type": "integer",
                        "readOnly": true
                    },
                    "checksum": {
                        "format": "int32",
                        "description": "Checksum signature of the artifact data prior to archival.  ",
                        "type": "integer",
                        "readOnly": true
                    },
                    "created_at": {
                        "format": "date-time",
                        "description": "Timestamp at which the artifact was created.",
                        "type": "string",
                        "readOnly": true
                    },
                    "object_type": {
                        "description": "Describes the related data object that generated the artifacts.",
                        "type": "string",
                        "example": "Conversation"
                    },
                    "agency_id": {
                        "description": "UUID of associated agency.",
                        "type": "string",
                        "readOnly": true
                    },
                    "object_id": {
                        "description": "UUID of the related data object (e.g. Conversation) associated with the artifact.",
                        "type": "string"
                    }
                },
                "example": {
                    "artifact_id": "ec50a672-3b84-4e6e-b6c3-4f9498d96808",
                    "object_id": "ff059fff-84a5-4449-b025-4c76aceb178b",
                    "agency_id": "1231e043-b112-4530-9c2c-22f82927296d",
                    "object_type": "Conversation",
                    "uri": "s3://{bucket}/path/to/artifact",
                    "content_type": "application/csv",
                    "size": 123456,
                    "checksum": 75873957478,
                    "created_at": "2022-01-15 10:32:35.000000"
                }
            },
            "Artifacts": {
                "description": "Array of `Artifact`",
                "type": "object"
            },
            "GeoLocation": {
                "title": "Root Type for GeoLocation",
                "description": "Data object describing a geolocation",
                "required": [
                ],
                "type": "object",
                "properties": {
                    "recipient_id": {
                        "description": "UUID of recipient associated with the geolocation.",
                        "type": "string"
                    },
                    "agency_id": {
                        "description": "UUID of agency associated with the geolocation resource.",
                        "type": "string",
                        "readOnly": true
                    },
                    "normalized_address": {
                        "description": "Geolocation formatted address.",
                        "type": "string"
                    },
                    "lat": {
                        "format": "double",
                        "description": "Geolocation latitude coordinate.",
                        "type": "number"
                    },
                    "lng": {
                        "format": "double",
                        "description": "Geolocation longitude coordinate.",
                        "type": "number"
                    },
                    "created_at": {
                        "format": "date-time",
                        "description": "Datetime at which the geolocation was created.",
                        "type": "string",
                        "readOnly": true
                    },
                    "updated_at": {
                        "format": "date-time",
                        "description": "Datetime at which geolocation was last updated.",
                        "type": "string"
                    },
                    "altitude": {
                        "format": "float",
                        "description": "Indicates the recipients reported altitude",
                        "type": "number"
                    },
                    "altitude_accuracy": {
                        "format": "float",
                        "description": "Indicates the accuracy of the recipients reported altitude",
                        "type": "number"
                    },
                    "latlng_uncertainty": {
                        "format": "float",
                        "description": "The calculated uncertainty of the recipient's latitude longitude.",
                        "type": "number"
                    },
                    "hat": {
                        "format": "float",
                        "description": "The calculated height above terrain of the recipient's location.",
                        "type": "number"
                    },
                    "hat_accuracy": {
                        "format": "float",
                        "description": "The accuracy of the calculated height above terrain of the recipient's location.",
                        "type": "number"
                    },
                    "latlng_accuracy": {
                        "format": "float",
                        "description": "Indicates the accuracy of latitude longitude location",
                        "type": "number"
                    },
                    "geolocation_id": {
                        "description": "UUID of geolocation record",
                        "type": "string",
                        "readOnly": false
                    },
                    "number": {
                        "description": "Phone number of the recipient",
                        "type": "string"
                    }
                },
                "example": {
                    "recipient_id": "67b243db-6c97-4dd0-97d6-3483b221257c",
                    "agency_id": "267a49e9-be38-40f0-a56c-d7db9a40dd27",
                    "normalized_address": "1255 23rd Street NW Washington, DC 20037",
                    "lat": 42.265504,
                    "lng": -73.2104832,
                    "latlng_accuracy": 0.8,
                    "latlng_uncertainty": 0.2,
                    "altitude": 56.2,
                    "altitude_accuracy": 0.4,
                    "hat": 44.90235,
                    "hat_accuracy": 0.877504,
                    "created_at": "2022-02-23 22:50:42.586708",
                    "updated_at": "2022-02-23 22:50:42.586708"
                }
            },
            "GeoLocations": {
                "description": "Array of `GeoLocation`",
                "type": "object"
            },
            "MagicToken": {
                "title": "Root Type for MagicToken",
                "description": "Magic Token data object",
                "required": [
                    "service_type"
                ],
                "type": "object",
                "properties": {
                    "token": {
                        "description": "Unique magic token used for accessing the associated service. Auto generated if not provided by the caller.",
                        "type": "string"
                    },
                    "recipient_id": {
                        "description": "UUID of the recipient linked to the magic token.",
                        "type": "string"
                    },
                    "last_status": {
                        "description": "Last status received from the service associated with the magic token.",
                        "type": "string",
                        "readOnly": true
                    },
                    "last_response": {
                        "description": "Last response received from the service associated with the magic token.",
                        "type": "string",
                        "readOnly": true
                    },
                    "created_at": {
                        "format": "int32",
                        "description": "Timestamp at which token was created.",
                        "type": "integer",
                        "readOnly": true
                    },
                    "updated_at": {
                        "format": "int32",
                        "description": "Timestamp at which token was last updated.",
                        "type": "integer"
                    },
                    "ttl": {
                        "writeOnly": true,
                        "description": "Time in seconds that the magic token should be active. Defaults to 300 (5 mins) if not specified.",
                        "type": "integer"
                    },
                    "service_type": {
                        "description": "Type of service magic token was created for.",
                        "enum": [
                            "addRecipientGeolocation",
                            "createVideoRoomToken",
                            "updateCurrentUser",
                            "downloadArtifact",
                            "fulfillUserInvitation"
                        ],
                        "type": "string"
                    },
                    "expires_at": {
                        "format": "int32",
                        "description": "Timestamp at which the magic token expires.",
                        "type": "integer",
                        "readOnly": true
                    },
                    "agency_id": {
                        "description": "UUID of associated agency.",
                        "type": "string",
                        "readOnly": true
                    },
                    "access_token": {
                        "description": "Unique access token required for fulfilling magic tokens.",
                        "type": "string",
                        "readOnly": true
                    },
                    "token_data": {
                        "$ref": "#/components/schemas/Object",
                        "description": "Data payload that has been preauthorized for use with the magic token",
                        "example": "{\n    \"room_id\": \"b9639f3f-0eec-44b8-9ece-573d48986a51\"\n}"
                    },
                    "token_url": {
                        "description": "URL to retrieve the token.",
                        "type": "string",
                        "readOnly": true
                    },
                    "recipient_number": {
                        "description": "Phone number of the associated recipient",
                        "type": "string"
                    },
                    "invite": {
                        "writeOnly": true,
                        "description": "If true, sends the token to the specified recipient.",
                        "type": "boolean"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Recipient",
                        "description": "Required if `invite` is true; specifies the recipient to deliver the token to"
                    },
                    "send_invitation": {
                        "writeOnly": true,
                        "description": "If true, sends the token to the invited participant",
                        "type": "boolean"
                    },
                    "invitation_message": {
                        "description": "If `send_invitation` is true, sends recipient the token with the specified invitation message.",
                        "type": "string"
                    },
                    "conversation_id": {
                        "description": "UUID of conversation to which the token is associated.",
                        "type": "string"
                    }
                },
                "example": {
                    "token": "joPq9lZ8",
                    "conversation_id": "bfe08ad0-cc90-4d19-b2e7-c0801db38767",
                    "access_token": "isxrut8xgfyg4rdgsz",
                    "service_type": "addRecipientGeolocation",
                    "recipient_id": "f9fa9546-c2df-4ef6-8141-d4eb316fc55a",
                    "agency_id": "67b243db-6c97-4dd0-97d6-3483b221257c",
                    "expires_at": 1650558174941,
                    "created_at": 1650557574998,
                    "updated_at": 1650557574998
                }
            },
            "Attachment": {
                "title": "Root Type for Attachment",
                "description": "Data object for message attachments",
                "required": [
                    "uri",
                    "conversation_id",
                    "recipient_id"
                ],
                "type": "object",
                "properties": {
                    "attachment_id": {
                        "description": "UUID of attachment",
                        "type": "string"
                    },
                    "message_id": {
                        "description": "UUID of message associated with the attachment",
                        "type": "string"
                    },
                    "recipient_id": {
                        "description": "UUID of recipient associated with attachment",
                        "type": "string"
                    },
                    "conversation_id": {
                        "description": "UUID of associated conversation",
                        "type": "string"
                    },
                    "filename": {
                        "description": "Filename of the attachment",
                        "type": "string"
                    },
                    "filesize": {
                        "format": "int32",
                        "description": "Filesize of the attachment",
                        "type": "integer"
                    },
                    "uri": {
                        "description": "URI of the stored attachment object",
                        "type": "string"
                    },
                    "thumbnail": {
                        "description": "URI of attachment thumbnail",
                        "type": "string"
                    },
                    "error_code": {
                        "description": "Error code received from provider during download attempt.",
                        "type": "string"
                    },
                    "error_message": {
                        "description": "Error message received from provider during download attempt.",
                        "type": "string"
                    },
                    "downloaded_at": {
                        "writeOnly": false,
                        "format": "int32",
                        "description": "Timestamp at which attachment was download from the provider.",
                        "type": "integer",
                        "readOnly": true
                    },
                    "created_at": {
                        "format": "int32",
                        "description": "Timestamp at which attachment was created.",
                        "type": "integer"
                    },
                    "updated_at": {
                        "format": "int32",
                        "description": "Timestamp at which attachment was last updated.",
                        "type": "integer"
                    },
                    "status": {
                        "description": "Status of the attachment data",
                        "enum": [
                            "downloading",
                            "downloaded",
                            "error"
                        ],
                        "type": "string"
                    },
                    "content_type": {
                        "description": "MIME content type of attachment",
                        "type": "string"
                    },
                    "agency_id": {
                        "description": "UUID of agency associated to the attachment",
                        "type": "string",
                        "readOnly": true
                    },
                    "metadata": {
                        "description": "Metadata extracted from the attachment.",
                        "type": "string"
                    }
                },
                "example": {
                    "attachment_id": "47cda56a-6da1-4f37-8375-cba1d9d64581",
                    "message_id": "67b243db-6c97-4dd0-97d6-3483b221257c",
                    "recipient_id": "0dcdfb28-5cc2-40b7-91af-822322579a96",
                    "conversation_id": "f525bc36-abbd-4e8d-8160-eb4eafdbaaa4",
                    "content_type": "image/png",
                    "filename": "DCM_94763.png",
                    "filesize": 34569376,
                    "uri": "s3://convey-911-sandbox/some/path/to/attachment.png",
                    "thumbnail": "s3://convey911-sandbox/some/path/to/thumbail.png",
                    "downloaded_at": 1651088061518,
                    "created_at": 1651088061504,
                    "updated_at": 1651088061504
                }
            },
            "Attachments": {
                "description": "List of `Attachment`",
                "type": "object"
            },
            "VideoRoom": {
                "title": "Root Type for VideoRoom",
                "description": "",
                "required": [
                    "conversation_id"
                ],
                "type": "object",
                "properties": {
                    "room_id": {
                        "description": "UUID of the video room.",
                        "type": "string",
                        "readOnly": true
                    },
                    "agency_id": {
                        "description": "UUID of agency associated with the video room.",
                        "type": "string",
                        "readOnly": true
                    },
                    "room_name": {
                        "description": "Friendly name of the video room.",
                        "type": "string"
                    },
                    "resource_url": {
                        "description": "Provider resource URI of the video room.",
                        "type": "string",
                        "readOnly": true
                    },
                    "status": {
                        "description": "Status of the video room.",
                        "type": "string"
                    },
                    "created_at": {
                        "format": "int32",
                        "description": "Timestamp at which video room was created.",
                        "type": "integer",
                        "readOnly": true
                    },
                    "updated_at": {
                        "format": "int32",
                        "description": "Timestamp at which video room was last updated.",
                        "type": "integer",
                        "readOnly": true
                    },
                    "conversation_id": {
                        "description": "UUID of conversation associated with video room.",
                        "type": "string"
                    },
                    "conversation_status": {
                        "description": "Status of the associated conversation.",
                        "type": "string"
                    },
                    "record": {
                        "description": "If true, will record the video session and store in the conversation artifacts.",
                        "type": "boolean"
                    },
                    "transcription": {
                        "description": "If true, indicates that transcription is enabled and active on the specified video room.",
                        "type": "boolean"
                    },
                    "participants": {
                        "description": "Array of connected participants",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VideoRoomParticipant"
                        }
                    }
                },
                "example": {
                    "room_id": "f9fa9546-c2df-4ef6-8141-d4eb316fc55a",
                    "agency_id": "0cf60ff8-5f5f-4d82-8925-b42184dd413c",
                    "conversation_id": "2392e31c-3378-4295-abd2-b79fff65fb29",
                    "room_name": "room 1234",
                    "resource_url": "",
                    "status": "active",
                    "conversation_status": "active",
                    "transcription": true,
                    "participants": [
                    ],
                    "created_at": 1653083800345,
                    "updated_at": 1653083800345
                }
            },
            "VideoRooms": {
                "description": "Array of `VideoRoom`",
                "type": "object"
            },
            "VideoStatus": {
                "title": "Root Type for VideoStatus",
                "description": "Data object containing provider status updates for video room sessions.",
                "type": "object",
                "properties": {
                    "conversation_id": {
                        "type": "string"
                    },
                    "resource_id": {
                        "type": "string"
                    },
                    "resource_url": {
                        "type": "string"
                    },
                    "error_code": {
                        "type": "string"
                    },
                    "error_message": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "example": {
                    "conversation_id": "5956689d-9ae1-40eb-a75d-e6b4cb1b9189",
                    "resource_id": "SMa434be19b88c4de4892d7533e3046679",
                    "resource_url": "https://video.provider.com/123asd978gasd",
                    "status": "in-progress"
                }
            },
            "VideoRoomToken": {
                "title": "Root Type for VideoRoomToken",
                "description": "Data object for requesting a video room access token.",
                "required": [
                    "participant"
                ],
                "type": "object",
                "properties": {
                    "room_id": {
                        "description": "UUID of the room to generate an access token for. ",
                        "type": "string",
                        "readOnly": true
                    },
                    "participant": {
                        "description": "Name or label of the participant.",
                        "type": "string",
                        "readOnly": false
                    },
                    "access_token": {
                        "description": "Provider access token used to join a video room.",
                        "type": "string",
                        "readOnly": true
                    },
                    "resource_url": {
                        "description": "Access URL of the video room",
                        "type": "string",
                        "readOnly": true
                    }
                },
                "example": {
                    "room_id": "aaec21ba-15de-4082-bd26-7676e8c3ee84",
                    "access_token": "eyJjdHkiOiJ0d2lsaW8tZnBhO3Y9MSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJpc3MiOiJTSzAzOGJiNmNkMzc1ZjFlM2IxMDA1MWUzNGNlNjc5ZDA5IiwiZXhwIjoxNjUzNTczMjYwLCJncmFudHMiOnsidmlkZW8iOnsicm9vbSI6ImFzZGZhZHNmIn19LCJqdGkiOiJTSzAzOGJiNmNkMzc1ZjFlM2IxMDA1MWUzNGNlNjc5ZDA5LTE2NTM1Njk2NjQiLCJzdWIiOiJBQzgyMDY5NzY3ZGVhMzIyZWM3MjRmMWQ2Yzg3MjU1Njg3In0.EQVEmWDIuHOdjxPAEQqDXMCu2mA0-cKrq_CWeq1bZqw",
                    "resource_url": "https://video.twilio.com/v1/Rooms/RM759a33bb91585e6d4b20316f71a4549a",
                    "resource_id": "RM759a33bb91585e6d4b20316f71a4549a",
                    "participant": "citizen"
                }
            },
            "Role": {
                "title": "Root Type for Roles",
                "description": "Object containing roles and permission levels.",
                "required": [
                    "role_id"
                ],
                "type": "object",
                "properties": {
                    "role_id": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {

                        }
                    }
                },
                "example": {
                    "role_id": "rol_2987hfve",
                    "role": "admin",
                    "permissions": [
                    ]
                }
            },
            "UserRole": {
                "title": "Root Type for UserRole",
                "description": "List of roles assigned to user.",
                "type": "array",
                "items": {
                    "type": "string"
                },
                "example": [
                    "admin",
                    "operator"
                ]
            },
            "ArtifactShare": {
                "title": "Root Type for ArtifactShare",
                "description": "Object for sharing artifacts to external recipients",
                "type": "object",
                "properties": {
                    "ttl": {
                        "format": "int32",
                        "description": "Number of seconds that the share link should be active for.",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Recipient name",
                        "type": "string"
                    },
                    "recipientEmails": {
                        "description": "List of recipient emails",
                        "minItems": 1,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "recipientNames": {
                        "description": "List of recipient names",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "magic_token": {
                        "$ref": "#/components/schemas/MagicToken",
                        "description": "Magic token shared with the request. Read only."
                    }
                },
                "example": {
                    "ttl": 86400,
                    "recipientEmails": [
                        "john.smith@abc.com"
                    ],
                    "recipientNames": [
                        "John Smith"
                    ]
                }
            },
            "VideoRoomParticipant": {
                "title": "Root Type for VideoRoomParticipant",
                "description": "Data object describing the participant of a video room",
                "required": [
                    "participant",
                    "participant_id"
                ],
                "type": "object",
                "properties": {
                    "room_id": {
                        "description": "UUID of the video room",
                        "type": "string",
                        "readOnly": true
                    },
                    "participant": {
                        "description": "10DLC of the participant that has joined the video room.",
                        "type": "string"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Object",
                        "description": "Metadata produced by the participant of the video room.",
                        "properties": {
                            "someKey": {
                                "type": "string"
                            }
                        }
                    },
                    "created_at": {
                        "format": "int32",
                        "description": "Timestamp at which participant joined the video room",
                        "type": "integer"
                    },
                    "updated_at": {
                        "format": "int32",
                        "description": "Timestamp at which the participant was last updated in the video room. ",
                        "type": "integer"
                    },
                    "participant_id": {
                        "description": "Unique resource ID associated with participant.",
                        "type": "string"
                    },
                    "recipient_id": {
                        "description": "UUID of the associated recipient, if exists.",
                        "type": "string"
                    },
                    "agency_id": {
                        "description": "UUID of associated agency",
                        "type": "string"
                    }
                },
                "example": {
                    "room_id": "04fcba2f-b278-4746-9f31-1cbbdec5f50a",
                    "participant": "+13105551212",
                    "metadata": {
                        "someKey": "someValue"
                    },
                    "created_at": 123456778,
                    "updated_at": 123456778
                }
            },
            "AgencySession": {
                "title": "Root Type for AgencySession",
                "description": "Data object defining the agency and session that have been bound.",
                "type": "object",
                "properties": {
                    "agency": {
                        "$ref": "#/components/schemas/Agency",
                        "description": "The agency that the session is attached to",
                        "readOnly": true
                    },
                    "session": {
                        "$ref": "#/components/schemas/Session",
                        "description": "The session that has been bound to the associated agency"
                    },
                    "agency_id": {
                        "description": "UUID of agency in which request was processed.",
                        "type": "string"
                    }
                },
                "example": {
                    "agency_id": "07f7f361-6cdc-4366-b5e1-ae0f453a979e",
                    "agency": {
                        "settings": {
                            "inboundConversationsEnabled": "true",
                            "twoFAForAll": "false",
                            "locationRequestTimeout": "10",
                            "closedConversationMessage": "The conversation is no longer live. Please call 911 in the event of an emergency.",
                            "primaryAreaCode": "207",
                            "secondaryAreaCode": "443",
                            "inboundConversationReceiptMessage": "How Can I help you.",
                            "videoRequestMaxAttempts": "3",
                            "customerLeftImage": "",
                            "videoEnabled": "true",
                            "agencyLogo": "https://sandbox.convey911.com/images/heroicon-badge.png",
                            "closedConversationTimeout": "60",
                            "videoRequestTimeout": "10",
                            "videoRequestDisclaimerMsg": "Reply STOP to opt out. Msg&Data Rates May Apply.",
                            "autoCloseEnabled": "true",
                            "brokerUri": "null",
                            "enableInternational": "false",
                            "locationRequestMaxAttempts": "3",
                            "locationRequestDisclaimerMsg": "Reply STOP to opt out. Msg&Data Rates May Apply.",
                            "customerRightImage": "",
                            "locationRequestExplainMsg": "Tap link to share location with first responder.",
                            "socketUri": "wss://ws-dev.convey911.com",
                            "videoRequestExplainMsg": "Tap link to live-stream video and audio to first responder.",
                            "enableAutosuggest": "true"
                        },
                        "environment": "qa",
                        "agency_name": "QA Demo Account 2",
                        "updated_at": "2022-11-11 13:44:53",
                        "roles": [
                            {
                                "role": "admin",
                                "role_id": "rol_bWwSTyfn3VxQmbj4",
                                "permissions": "admin:agency"
                            },
                            {
                                "role": "operator",
                                "role_id": "rol_nKhyBZHTLyJ1CA1z"
                            }
                        ],
                        "agency_id": "07f7f361-6cdc-4366-b5e1-ae0f453a979e",
                        "numbers": [
                            {
                                "number": "+14434874159",
                                "capabilities": [
                                    "sms",
                                    "mms"
                                ]
                            }
                        ],
                        "created_at": "2022-11-11 13:44:52",
                        "region": "us-east",
                        "agency_domain": "convey911.com",
                        "status": "active"
                    },
                    "session": {
                        "socket_id": "abc12345",
                        "federated_id": "auth0|9efed36c-adf6-438a-9f04-e9dce2938986",
                        "updated_at": "2022-12-11 20:11:38",
                        "user_id": "9efed36c-adf6-438a-9f04-e9dce2938986",
                        "agency_id": "07f7f361-6cdc-4366-b5e1-ae0f453a979e",
                        "session_id": "0662bbe9-b246-4003-9599-4f5a250b23c6",
                        "created_at": "2022-12-11 20:11:16",
                        "ttl": 300,
                        "status": "active"
                    }
                }
            },
            "Transcription": {
                "title": "Root Type for Transcription",
                "description": "Data object containing voice transcription.",
                "type": "object",
                "properties": {
                    "conversation_id": {
                        "description": "UUID of conversation for the transcription.",
                        "type": "string"
                    },
                    "recipient_id": {
                        "description": "UUID of recipient that generated the transcription",
                        "type": "string"
                    },
                    "agency_id": {
                        "writeOnly": false,
                        "description": "UUID of agency associated with the transcription.",
                        "type": "string"
                    },
                    "text": {
                        "description": "Text transcription",
                        "type": "string"
                    },
                    "text_trans": {
                        "description": "Translated text transcription if the recipient has specified a language.",
                        "type": "string"
                    },
                    "direction": {
                        "description": "Indicates which direction in the conversation the transcription occurred.",
                        "enum": [
                            "inbound",
                            "outbound"
                        ],
                        "type": "string"
                    },
                    "provider": {
                        "description": "The provider from which the translation was generated",
                        "type": "string"
                    },
                    "score": {
                        "format": "float",
                        "description": "The accuracy score of the translation",
                        "type": "number"
                    }
                },
                "example": {
                    "conversation_id": "9d71041c-b049-4d95-8247-d4a551879b8d",
                    "recipient_id": "20d1f048-09d2-4198-a5a3-8eefe417fdaf",
                    "agency_id": "07f7f361-6cdc-4366-b5e1-ae0f453a979e",
                    "text": "Hello, this is a test",
                    "text_trans": "hola esto es una prueba"
                }
            },
            "TranscriptionResults": {
                "description": "List of `Transcription` results",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Transcription"
                }
            },
            "TranslationResults": {
                "description": "List of `Translation`",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Translation"
                }
            },
            "Contact": {
                "title": "Root Type for Contact",
                "description": "Data object describing a Contact, which is associated with a Recipient",
                "type": "object",
                "properties": {
                    "contact_id": {
                        "description": "UUID of contact record.",
                        "type": "string"
                    },
                    "fname": {
                        "description": "First name",
                        "type": "string"
                    },
                    "lname": {
                        "description": "Last name",
                        "type": "string"
                    },
                    "nickname": {
                        "description": "Label or nickname of the contact",
                        "type": "string"
                    },
                    "email": {
                        "description": "Contact email",
                        "type": "string"
                    },
                    "note": {
                        "description": "Notes associated with the contact record",
                        "type": "string"
                    },
                    "confidential": {
                        "description": "Indicates whether the contact is a confidential source",
                        "type": "boolean"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Object",
                        "description": "Metadata associated with the contact"
                    },
                    "created_at": {
                        "format": "date-time",
                        "description": "Timestamp at which contact was created",
                        "type": "string"
                    },
                    "deleted_at": {
                        "description": "Timestamp at which contact was deleted. Default null.",
                        "type": "string"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "description": "Timestamp at which the contact was last updated.",
                        "type": "string"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Recipient",
                        "description": "The recipient attached to the contact record."
                    },
                    "vanity_number": {
                        "$ref": "#/components/schemas/ProviderNumber",
                        "description": "The 10DLC number for communications with the contact"
                    }
                },
                "example": {
                    "contact_id": "e707240a-09be-4401-b8ed-744a52e757c9",
                    "fname": "John",
                    "lname": "Smith",
                    "nickname": "JSmith",
                    "email": "john@email.com",
                    "note": "",
                    "confidential": true,
                    "metadata": {

                    },
                    "created_at": "2020-02-15 00:00:00",
                    "upated_at": "2020-02-15 00:00:00"
                }
            },
            "Contacts": {
                "description": "Array of Contact",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Contact"
                }
            },
            "Conversation": {
                "description": "Conversation Object",
                "required": [
                ],
                "type": "object",
                "properties": {
                    "agency_id": {
                        "description": "UUID of agency associated with the conversation",
                        "maxLength": 36,
                        "minLength": 36,
                        "type": "string",
                        "readOnly": true
                    },
                    "number_id": {
                        "description": "UUID of outbound number. Required if `number` is not specified.",
                        "maxLength": 36,
                        "minLength": 36,
                        "type": "string",
                        "readOnly": true
                    },
                    "operator_id": {
                        "writeOnly": true,
                        "description": "ID of agent assigned to the conversation.",
                        "maxLength": 36,
                        "minLength": 36,
                        "type": "string",
                        "readOnly": true
                    },
                    "recipients": {
                        "description": "Array of recipient phone numbers assigned to the conversation.",
                        "maxItems": 99,
                        "minItems": 0,
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Recipient"
                        },
                        "example": ""
                    },
                    "conversation_id": {
                        "description": "UUID of conversation object",
                        "maxLength": 36,
                        "minLength": 36,
                        "type": "string",
                        "readOnly": true
                    },
                    "number": {
                        "description": "The 10 digit (US) or 13 digit (with iso prefix) number or 911 to use for the conversation. Automatically assigned if not specified in the initial `Create Conversation` request.",
                        "maxLength": 13,
                        "minLength": 3,
                        "type": "string"
                    },
                    "label": {
                        "description": "Label or descriptor to assign to the conversation.",
                        "type": "string"
                    },
                    "language": {
                        "writeOnly": true,
                        "description": "ISO language code associated with the conversation. Not applicable to conversations with multiple recipients.  ",
                        "maxLength": 5,
                        "minLength": 2,
                        "type": "string"
                    },
                    "message": {
                        "description": "Opening message to instantiate the conversation with.",
                        "type": "string"
                    },
                    "direction": {
                        "writeOnly": true,
                        "description": "Specifies the direction of the initial conversation. Defaults to `outbound` if not specified in the request.",
                        "enum": [
                            "inbound",
                            "outbound"
                        ],
                        "type": "string"
                    },
                    "recipient_number_list": {
                        "description": "List of recipient phone numbers on the conversation",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "readOnly": true
                    },
                    "primary_recipient": {
                        "description": "The primary recipient phone number on the conversation.",
                        "type": "string",
                        "readOnly": true
                    },
                    "recent_message": {
                        "description": "The body of the most recent message on the conversation.",
                        "type": "string"
                    },
                    "source": {
                        "description": "The name or label of the number sourced to the conversation.",
                        "type": "string"
                    },
                    "channel": {
                        "description": "The channel through which the conversation was created. This can be SMS, voice or web chat.",
                        "enum": [
                            "sms",
                            "voice",
                            "web",
                            "media",
                            "notification"
                        ],
                        "type": "string"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Object",
                        "description": "Unstructured JSON metadata associated with the conversation object"
                    },
                    "operator_name": {
                        "description": "Name of agent assigned to the conversation.",
                        "type": "string"
                    },
                    "tcc_session": {
                        "$ref": "#/components/schemas/TCCSession",
                        "description": "Specifies the `TCCSession` if the conversation was started as a Text-to-911 session."
                    },
                    "resources": {
                        "description": "If `source` is media, then an array of `Resource` specifies the input files to process.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "state": {
                        "description": "A status indicator showing the state of the conversation. ",
                        "type": "string"
                    }
                }
            },
            "TranslationDetection": {
                "title": "Root Type for TranslationDetection",
                "description": "Request object for performing language recognition requests ",
                "required": [
                    "input_text"
                ],
                "type": "object",
                "properties": {
                    "input_text": {
                        "description": "Input text to perform language recognition on.",
                        "type": "string",
                        "readOnly": false
                    }
                },
                "example": {
                    "input_text": "Hola, como estas"
                }
            },
            "VideoRoomParticipants": {
                "description": "Array of `VideoRoomParticipant`",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/VideoRoomParticipant"
                }
            },
            "Invitation": {
                "title": "Root Type for Invitation",
                "description": "User invitation object",
                "required": [
                    "email"
                ],
                "type": "object",
                "properties": {
                    "invite_id": {
                        "description": "UUID of the invitation",
                        "type": "string"
                    },
                    "agency_id": {
                        "format": "date-time",
                        "description": "Agency UUID",
                        "type": "string"
                    },
                    "email": {
                        "description": "Invited user's email address",
                        "type": "string"
                    },
                    "roles": {
                        "description": "User roles to be associated with the invited user.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        }
                    },
                    "fulfilled_at": {
                        "format": "date-time",
                        "description": "Timestamp at which the invitation was fulfilled",
                        "type": "string"
                    },
                    "expires_at": {
                        "format": "date-time",
                        "description": "Timestamp at which the invitation expires",
                        "type": "string"
                    },
                    "deleted_at": {
                        "format": "date-time",
                        "description": "If set, indicates the time at which the invite was revoked",
                        "type": "string"
                    },
                    "created_at": {
                        "format": "date-time",
                        "description": "Time at which invite was created",
                        "type": "string"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "description": "Timestamp at which the invite was last updated",
                        "type": "string"
                    },
                    "ttl": {
                        "writeOnly": true,
                        "description": "Specifies the time-to-live when setting the expiration date of the invitation.",
                        "type": "number"
                    },
                    "fname": {
                        "description": "Invited user's first name",
                        "type": "string"
                    },
                    "lname": {
                        "description": "Last name of invited user",
                        "type": "string"
                    }
                },
                "example": {
                    "invite_id": "abffad0d-964e-4b3e-bbcd-56dfb9f2249b",
                    "agency_id": "d4ef163a-5063-4aa0-b02b-14ed4ce0d575",
                    "email": "johnsmith@email.com",
                    "first_name": "John",
                    "last_name": "Smith",
                    "roles": [
                        "agent",
                        "admin"
                    ],
                    "expires_at": "2023-02-20 14:04:15.000000",
                    "created_at": "2023-02-20 14:04:15.000000",
                    "updated_at": "2023-02-20 14:04:15.000000"
                }
            },
            "Invitations": {
                "description": "Array of `Invitation`",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Invitation"
                }
            },
            "TCCSession": {
                "title": "Root Type for TCCSession",
                "description": "Data object describing TCC 911 sessions.",
                "type": "object",
                "properties": {
                    "session_id": {
                        "type": "string"
                    },
                    "session_name": {
                        "type": "string"
                    },
                    "agency_id": {
                        "type": "string"
                    },
                    "cpn": {
                        "type": "string"
                    },
                    "remote_ip": {
                        "type": "string"
                    },
                    "geolocation_uri": {
                        "type": "string"
                    },
                    "conversation_id": {
                        "type": "string"
                    },
                    "session_data": {
                        "type": "string"
                    },
                    "closed_at": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "updated_at": {
                        "type": "string"
                    },
                    "transfer_psap_id": {
                        "description": "If the session has been transferred, specifies the destination PSAP ID to which the session was transfered.",
                        "type": "number",
                        "example": "6287"
                    },
                    "transfer_status": {
                        "description": "If the session is transfered, will indicate the status of the PSAP transfer",
                        "enum": [
                            "in-progress",
                            "completed",
                            "failed"
                        ],
                        "type": "string",
                        "readOnly": true
                    },
                    "transferred_at": {
                        "format": "date-time",
                        "description": "Date time at which the PSAP transfer was initiatiated. ",
                        "type": "string"
                    },
                    "session_status": {
                        "description": "Status of the specified TCC session",
                        "enum": [
                            "active",
                            "closed"
                        ],
                        "type": "string"
                    }
                },
                "example": {
                    "session_id": "2095c2ec-3cc1-444b-91d2-6ea535029f1e",
                    "session_name": "sd9f8yg89q37g4",
                    "session_status": "active",
                    "agency_id": "b69ecbed-77f6-4462-b57b-ef4ad4f70b75",
                    "cpn": "4105551212-76593",
                    "remote_ip": "1.2.3.4",
                    "geolocation_uri": "http://held-deref.xyz.com/8d63ghf94",
                    "conversation_id": "67b243db-6c97-4dd0-97d6-3483b221257c",
                    "session_data": "",
                    "created_at": "2023-05-03 15:27:35.934439",
                    "updated_at": "2023-05-03 15:29:44.754801"
                }
            },
            "TCCSessions": {
                "description": "Array of `TCCSession`",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/TCCSession"
                }
            },
            "TCCTransferPoint": {
                "title": "Root Type for TCCTransferPoint",
                "description": "Data object describing available PSAP transfer points for TCC sessions.",
                "type": "object",
                "properties": {
                    "psap_id": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "psap_name": {
                        "type": "string"
                    },
                    "psap_zipcode": {
                        "type": "string"
                    },
                    "psap_state": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "updated_at": {
                        "type": "string"
                    }
                },
                "example": {
                    "psap_id": 1846,
                    "psap_name": "Baltimore City PD",
                    "psap_zipcode": "21045",
                    "psap_state": "MD",
                    "created_at": "2023-05-03 15:21:32.508092",
                    "updated_at": "2023-05-03 15:21:32.508092"
                }
            },
            "TCCTransferPoints": {
                "description": "Array of `TCCTransferPoint`",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/TCCTransferPoint"
                }
            },
            "Metadata": {
                "title": "Root Type for Metadata",
                "description": "Object type describing a piece of metadata relative to some system object.",
                "type": "object",
                "properties": {
                    "metadata_id": {
                        "type": "string"
                    },
                    "object_type": {
                        "type": "string"
                    },
                    "object_id": {
                        "type": "string"
                    },
                    "content_type": {
                        "type": "string"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Object"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "example": {
                    "metadata_id": "cb698444-a212-41d7-b128-2b16db2a373a",
                    "object_type": "077dea4d-aade-4450-86bd-c8eea2ed8a43",
                    "object_id": "Message",
                    "content_type": "application/json",
                    "metadata": {

                    },
                    "created_at": "2022-11-11 13:44:52",
                    "updated_at": "2022-11-11 13:44:52"
                }
            },
            "TCCTransferStatus": {
                "title": "Root Type for TCCTransferStatus",
                "description": "Data object describing the status of a TCC session transfer",
                "required": [
                    "transfer_status"
                ],
                "type": "object",
                "properties": {
                    "transfer_status": {
                        "enum": [
                            "pending",
                            "succeeded",
                            "failed"
                        ],
                        "type": "string"
                    }
                },
                "example": {
                    "transfer_status": "succeeded"
                }
            },
            "CallEvent": {
                "title": "Root Type for CallEvent",
                "description": "Data object describing a voice call event that occurs.",
                "type": "object",
                "properties": {
                    "conversation_id": {
                        "type": "string"
                    },
                    "eventType": {
                        "type": "string"
                    },
                    "recipient_id": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "updated_at": {
                        "type": "string"
                    },
                    "event_metadata": {
                        "$ref": "#/components/schemas/Object",
                        "description": "Metadata associated with the event."
                    }
                },
                "example": {
                    "conversation_id": "",
                    "eventType": "call_end",
                    "recipient_id": "",
                    "created_at": "",
                    "updated_at": ""
                }
            },
            "AuthTokenRequest": {
                "title": "Root Type for AuthTokenRequest",
                "description": "Data object for requesting an auth JWT token",
                "required": [
                    "agency_secret"
                ],
                "type": "object",
                "properties": {
                    "agency_secret": {
                        "type": "string"
                    }
                },
                "example": {
                    "agency_secret": "asdfsadf9afgd8asof"
                }
            },
            "AuthToken": {
                "title": "Root Type for AuthToken",
                "description": "JWT access token",
                "type": "object",
                "properties": {
                    "access_token": {
                        "type": "string"
                    },
                    "token_type": {
                        "type": "string"
                    },
                    "agency_name": {
                        "description": "Name of agency associated with JWT token",
                        "type": "string"
                    },
                    "agency_id": {
                        "description": "UUID of agency associated with token JWT",
                        "type": "string"
                    }
                },
                "example": {
                    "access_token": "",
                    "token_type": "bearer"
                }
            }
        },
        "responses": {
            "NotFoundResponse": {
                "content": {
                    "application/json": {

                    }
                },
                "description": "Not found response object."
            },
            "JsonListResponse": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ResponseJsonContainer"
                        }
                    }
                },
                "description": "Standard OpenAPI JSON response returned by the API containing a list of objects."
            },
            "ApiDataResponse": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ResponseDataObject"
                        }
                    }
                },
                "description": "Standard OpenAPI JSON response returned by the API containing a single data object."
            }
        },
        "securitySchemes": {
            "oauth2-client-credentials-scheme": {
                "flows": {
                    "clientCredentials": {
                        "tokenUrl": "https://sso.convey911.com/oauth/token",
                        "refreshUrl": "https://sso.convey911.com/oauth/token",
                        "scopes": {
                            "create:conversation": "Scope required to create a conversation",
                            "list:conversation": "Scope required to retrieve conversation list",
                            "read:conversation": "Scope required for viewing a conversation",
                            "update:conversation": "Scope required for updating a conversation",
                            "delete:conversation": "Scope required for deleting a conversation",
                            "assign:conversation": "Scope required to assign an agent to a conversation",
                            "unassign:conversation": "Scope required to unassign an agent from a conversation",
                            "read:messages": "Scope required to read messages on a conversation",
                            "create:message": "Scope required to create a message in a conversation",
                            "list:agencies": "Scope required to retrieve agency list",
                            "read:agency": "Scope required to view an agency",
                            "update:agency": "Scope required to update an agency",
                            "delete:agency": "Scope required to delete an agency",
                            "create:agency": "Scope required to create an agency",
                            "list:users": "Scope required to retrieve user list",
                            "read:user": "Scope required to view a user",
                            "update:user": "Scope required to update a user",
                            "delete:user": "Scope required to delete a user",
                            "create:user": "Scope required to create a user",
                            "invite:user": "Scope required to send a user invitation",
                            "link:user": "Scope required to link user accounts",
                            "read:recipient:geolocations": "Scope required to retrieve geolocations for a recipient",
                            "create:recipient:geolocation": "Scope required to create new geolocation for a recipient",
                            "read:sessions": "Scope required to retrieve and read user session data",
                            "update:session": "Scope required to update user session data",
                            "create:session": "Scope required to create user session",
                            "bind:session": "Scope required to bind a user session to an agency",
                            "create:number": "Scope required to create a provider number",
                            "update:number": "Scope required to update a provider number",
                            "delete:number": "Scope required to delete a provider number",
                            "read:number": "Scope required to list and read provider numbers",
                            "read:recipients": "Scope required to list and read recipients",
                            "create:recipient": "Scope required to create recipients",
                            "update:recipient": "Scope required to update a recipient",
                            "delete:recipient": "Scope required to delete a recipient",
                            "create:video_room": "Scope required to create a video room",
                            "update:video_room": "Scope required to update a video room",
                            "delete:video_room": "Scope required to delete a video room",
                            "read:video_rooms": "Scope required to list and read video rooms",
                            "create:attachment": "Scope required to create new attachments",
                            "update:attachment": "Scope required to update attachments",
                            "delete:attachment": "Scope required to delete attachments",
                            "read:attachments": "Scope required to list and read attachments",
                            "read:translations": "Scope required to access translation services",
                            "read:contacts": "Scope required to read and list contacts",
                            "create:contact": "Scope required to create contacts",
                            "update:contact": "Scope required to update a contact",
                            "delete:contact": "Scope required to delete a contact",
                            "update:contact:numbers": "Scope required to assign and unassign numbers to a contact",
                            "create:token": "Scope required to create magic tokens for external recipients",
                            "update:message:status": "Scope required to update message delivery status",
                            "list:numbers": "List agency numbers"
                        }
                    }
                },
                "type": "oauth2",
                "description": "oAuth/JWT client credentials flow for M2M authorization."
            },
            "oauth2-authorization-code-scheme": {
                "flows": {
                    "authorizationCode": {
                        "authorizationUrl": "https://sso.convey911.com/oauth/token",
                        "tokenUrl": "https://sso.convey911.com/oauth/token",
                        "refreshUrl": "https://sso.convey911.com/oauth/token",
                        "scopes": {
                            "create:conversation": "Scope required to create a conversation",
                            "list:conversations": "Scope required to retrieve conversation list",
                            "read:conversation": "Scope required to view a conversation",
                            "delete:conversation": "Scope required to delete a conversation",
                            "update:conversation": "Scope required to update a conversation",
                            "assign:conversation": "Scope required to assign an agent to a conversation",
                            "unassign:conversation": "Scope required to unassign an agent from a conversation",
                            "read:messages": "Scope required to view messages on a conversation",
                            "create:message": "Scope required to create a message in a conversation",
                            "read:agency": "Scope required to view an agency",
                            "list:agencies": "Scope required to retrieve agency list",
                            "create:agency": "Scope required to create an agency",
                            "update:agency": "Scope required to update an agency",
                            "delete:agency": "Scope required to delete an agency",
                            "list:users": "Scope required to retrieve user list",
                            "read:user": "Scope required to view a user",
                            "update:user": "Scope required to update a user",
                            "create:user": "Scope required to create a user",
                            "delete:user": "Scope required to delete a user",
                            "invite:user": "Scope required to send a user invitation",
                            "link:user": "Scope required to link user accounts",
                            "create:currentuser:template": "Scope required to enable current user to create message templates",
                            "read:currentuser:templates": "Scope required to retrieve and view message templates for the current user",
                            "update:currentuser:template": "Scope required to allow current user to update their message templates",
                            "read:currentuser": "Scope required to view current user",
                            "update:currentuser": "Scope required to update the current user",
                            "create:currentuser": "Scope required for current user to create themselves",
                            "read:recipient:geolocations": "Scope required to retrieve geolocations for a recipient",
                            "create:recipient:geolocation": "Scope required to create geolocation for a recipient",
                            "read:sessions": "Scope required to retrieve user session data",
                            "create:session": "Scope required to create a user session",
                            "update:session": "Scope required to update and delete a user session",
                            "bind:session": "Scope required to bind a user session to an agency",
                            "read:number": "Scope required to list and read provider numbers",
                            "create:number": "Scope required to create provider number",
                            "update:number": "Scope required to update a provider number",
                            "delete:number": "Scope required to delete a provider number",
                            "read:recipients": "Scope required to list and view recipients",
                            "create:recipient": "Scope required to create new recipients",
                            "update:recipient": "Scope required to update a recipient",
                            "delete:recipient": "Scope required to delete a recipient",
                            "create:video_room": "Scope required to create a video room",
                            "update:video_room": "Scope required to update a video room",
                            "delete:video_room": "Scope required to delete a video room",
                            "read:video_rooms": "Scope required to list and read video rooms",
                            "read:attachments": "Scope required to list and read attachments",
                            "create:attachment": "Scope required to create a new attachment",
                            "delete:attachment": "Scope required to delete attachments",
                            "update:attachment": "Scope required to update attachments",
                            "read:translations": "Scope required to access translation services",
                            "read:contacts": "Scope required to read and list contacts",
                            "create:contact": "Scope required to create a contact",
                            "delete:contact": "Scope required to delete a contact",
                            "update:contact": "Scope required to update contacts",
                            "update:contact:numbers": "Scope required to assign and unassign numbers to a contact",
                            "create:token": "Scope required to create magic tokens for external recipients",
                            "update:message:status": "Scope required to update message delivery status",
                            "list:numbers": "List agency numbers"
                        }
                    }
                },
                "type": "oauth2",
                "description": "User oAuth/JWT authorization code flow for 3-legged user authorization"
            }
        }
    }
}",
    "filename" : "yakrcl-openapi.json",
    "type" : "File"
  },
  "id" : "38657aaf-c7a4-4a04-9321-bb750c2e67b5",
  "name" : "yakrcl-openapi.json",
  "description" : "YakRCL OpenAPI Contract",
  "createdAt" : "2023-10-04T18:05:17.62500935",
  "updatedAt" : "2023-10-04T18:05:17.625010294",
  "createdBy" : "612c1b37-217d-49f9-b344-54b8af760f6a",
  "updatedBy" : "612c1b37-217d-49f9-b344-54b8af760f6a"
}