{
  "type" : "BEANS",
  "properties" : {
    "codeGroovy" : "beans {\n    myString = 'Hello World!'\n\n    myProcessor = processor { \n        it.in.body = 'Hello from Groovy'\n    }\n\n    myPredicate = predicate {\n        it.in.body != null\n    }\n}",
    "codeJava" : "@BindToRegistry\npublic Processor validateJwt() {\n    return exchange -> {\n        String operationId = (String)exchange.getProperty(\"CamelToEndpoint\");\n        if (operationId.startsWith(\"direct://\"))\n            operationId = operationId.replace(\"direct://\", \"\");\n\n\t\t\t\tif (exchange.getProperty(\"x-operation-id\") == null) {\n        \texchange.getIn().setHeader(\"x-operation-id\", operationId);\n        \texchange.setProperty(\"x-operation-id\", operationId);\n\t\t\t\t}\n\n        Boolean xAuthorized = false;\n        if (exchange.getProperty(\"x-authorized\") != null || exchange.getIn().getHeader(\"x-authorized\") != null) {\n            try {\n                xAuthorized = (Boolean)(exchange.getProperty(\"x-authorized\") != null ? Boolean.parseBoolean(String.valueOf(exchange.getProperty(\"x-authorized\"))) : Boolean.parseBoolean(String.valueOf(exchange.getIn().getHeader(\"x-authorized\"))));\n            } catch (Exception e) {\n                System.out.println(e);\n            }\n        }\n\n        if ( (exchange.getProperty(\"jwtAuth\") != null && ((Boolean)exchange.getProperty(\"jwtAuth\")) == true) || (xAuthorized != null && xAuthorized == true) ) {\n            exchange.setProperty(\"jwtAuth\", true);\n            return;\n        }\n\n        String token = (String)exchange.getIn().getHeader(\"Authorization\");\n\n        if (token != null && token.toUpperCase().startsWith(\"BEARER\")) {\n            token = token.substring(7);\n\n            CamelContext context = exchange.getContext();\n            String jwtDomain = (String)context.getPropertiesComponent().resolveProperty(\"convey.auth0.domain\").get();\n            String jwtAudience = (String)context.getPropertiesComponent().resolveProperty(\"convey.auth0.audience\").get();\n            String yakApiAudience = (String)context.getPropertiesComponent().resolveProperty(\"convey.auth0.yakApiAudience\").get();\n\n            try {\n                DecodedJWT decodedJWT = JWT.decode(token);\n\n                JwkProvider provider = new UrlJwkProvider(new URL(jwtDomain + \".well-known/jwks.json\"));\n                Jwk jwk = provider.get(decodedJWT.getKeyId());\n\n                Algorithm algorithm = Algorithm.RSA256((RSAPublicKey)jwk.getPublicKey(), null);\n                JWTVerifier verifier = JWT.require(algorithm)\n                    .withIssuer(jwtDomain)\n                    .withAnyOfAudience(jwtAudience, yakApiAudience)\n                    .build();\n                DecodedJWT jwt = verifier.verify(token);\n\n                String jwtSubject = jwt.getSubject();\n                String jwtIssuer = decodedJWT.getIssuer();\n                Claim pClaims = jwt.getClaim(\"permissions\");\n                List<String> permissions = pClaims.as(List.class);\n\n                exchange.setProperty(\"xJwtClaims\", permissions);\n\n                String jwtUser = jwtSubject;\n\t\t\t\t\t\t\t  // Causing a bug\n                //if (jwtUser.contains(\"|\"))\n                    //jwtUser = jwtUser.substring(jwtUser.indexOf(\"|\")+1);\n\n                Claim userPid = jwt.getClaim(\"https://api.convey911.com/user_id\");\n                if (userPid != null) {\n                    exchange.setProperty(\"userPuid\", userPid.asString());\n                    exchange.setProperty(\"userUuid\", userPid.asString());\n                    exchange.getIn().setHeader(\"x-user-puid\", userPid.asString());\n                }\n\n                exchange.setProperty(\"jwtAuth\", true);\n                exchange.setProperty(\"userId\", jwtUser);\n                exchange.setProperty(\"jwtToken\", jwt.getToken());\n                exchange.getIn().setHeader(\"x-user-id\", jwtSubject);\n\n            } catch (com.auth0.jwt.exceptions.JWTVerificationException | com.auth0.jwk.JwkException | java.net.MalformedURLException ex) {\n                System.out.println(\"JWT Exception: \" + ex);\n                exchange.getIn().setBody(\"\");\n                exchange.getIn().setHeader(\"CamelHttpResponseCode\", 401);\n            }\n        } else {\n\t\t\t\t\t\tSystem.out.println(\"Missing or malformed token\");\n\t\t\t\t\t\texchange.getIn().setBody(\"\");\n\t\t\t\t\t\texchange.getIn().setHeader(\"CamelHttpResponseCode\", 401);\n\t\t\t\t}\n    };\n}",
    "importsJava" : "import org.apache.camel.CamelContext;\nimport org.apache.camel.BindToRegistry;\nimport org.apache.camel.Processor;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.commons.codec.binary.Base64;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.JWTVerifier;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.exceptions.JWTVerificationException;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport com.auth0.jwk.UrlJwkProvider;\nimport com.auth0.jwk.JwkProvider;\nimport com.auth0.jwk.Jwk;\nimport com.auth0.jwk.JwkException;\nimport com.auth0.jwt.interfaces.Claim;\n\nimport java.security.interfaces.RSAPublicKey;\nimport java.net.URL;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Collection;",
    "type" : "Java"
  },
  "id" : "07e34d9c-7cea-4532-94e6-7da0f6bddeb3",
  "name" : "JwtAuthorizer",
  "description" : "JWT Authorizer Bean",
  "createdAt" : "2023-10-04T18:05:16.775841277",
  "updatedAt" : "2023-10-04T18:05:16.775842618",
  "createdBy" : "612c1b37-217d-49f9-b344-54b8af760f6a",
  "updatedBy" : "612c1b37-217d-49f9-b344-54b8af760f6a"
}