{
  "type" : "BEANS",
  "properties" : {
    "codeGroovy" : "beans {\n    myString = 'Hello World!'\n\n    myProcessor = processor { \n        it.in.body = 'Hello from Groovy'\n    }\n\n    myPredicate = predicate {\n        it.in.body != null\n    }\n}",
    "codeJava" : "// Upgrade to v3beta1  https://googleapis.dev/java/google-api-grpc/0.62.0/com/google/cloud/translate/v3beta1/TranslateTextRequest.Builder.html\n@BindToRegistry\npublic Processor detectLanguageV3beta1() {\n    return exchange -> {\n\n        URL googleCredentialUri;\n        String projectId = (String)exchange.getProperty(\"googleProjectId\");\n        GoogleCredentials credentials = null;\n        TranslationServiceSettings translationServiceSettings = null;\n\n        try {\n\t\t\t\t\t\tString credentialFile = (String)exchange.getProperty(\"credentialFile\");\n            googleCredentialUri = exchange.getContext().getClassResolver().loadResourceAsURL(credentialFile);\n            credentials = GoogleCredentials.fromStream(googleCredentialUri.openStream());\n        } catch (Exception e) {\n            System.out.println(\"Failed to read/generate credentials \" + e);\n            return;\n        }\n\n        try {\n            translationServiceSettings = TranslationServiceSettings.newBuilder()\n                .setCredentialsProvider(FixedCredentialsProvider.create(credentials))\n                .build();\n\n\n            try (TranslationServiceClient client = TranslationServiceClient.create(translationServiceSettings)) {\n\n                LocationName parent = LocationName.of(projectId, \"global\");\n\n                // Supported Mime Types: https://cloud.google.com/translate/docs/supported-formats\n                DetectLanguageRequest request = DetectLanguageRequest.newBuilder()\n                    .setParent(parent.toString())\n                    .setMimeType(\"text/plain\")\n                    .setContent((String)exchange.getIn().getBody())\n                    .build();\n\n                DetectLanguageResponse response = client.detectLanguage(request);\n\n                ArrayList<HashMap<String, Object>> detectResults = new ArrayList<HashMap<String, Object>>();\n\n                for (DetectedLanguage language : response.getLanguagesList()) {\n                    detectResults.add(new HashMap<String, Object>() {{\n                        put(\"code\", language.getLanguageCode());\n                        put(\"confidence\", language.getConfidence());\n                    }});\n                }\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (detectResults.size() == 0) {\n\t\t\t\t\t\t\t\t\texchange.getIn().setHeader(\"CamelHttpResponseCode\", 404);\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t              exchange.getIn().setBody(detectResults);\n  \t            exchange.getIn().setHeader(\"CamelHttpResponseCode\", 200);\t\t\t\t\t\t\t\n            }\n        } catch (Exception e) {\n            exchange.getIn().setBody(e.getMessage());\n            exchange.getIn().setHeader(\"CamelHttpResponseCode\", 500);\n        }\n\n    };\n}\n\n@BindToRegistry\npublic Processor translateTextV3beta1() {\n    return exchange -> {\n\n        URL googleCredentialUri;\n        String projectId = (String)exchange.getProperty(\"googleProjectId\");\n        GoogleCredentials credentials = null;\n        TranslationServiceSettings translationServiceSettings = null;\n\n        try {\n\t\t\t\t\t\tString credentialFile = (String)exchange.getProperty(\"credentialFile\");\n\t\t\t\t\t\t//String credentialFile = \"yakrcl-service-account-dev.json\";\n            googleCredentialUri = exchange.getContext().getClassResolver().loadResourceAsURL(credentialFile);\n            credentials = GoogleCredentials.fromStream(googleCredentialUri.openStream());\n        } catch (Exception e) {\n            System.out.println(\"Failed to read/generate credentials \" + e);\n            return;\n        }\n\n        try {\n            translationServiceSettings = TranslationServiceSettings\n\t\t\t\t\t\t\t.newBuilder()\n\t\t\t\t\t            .setCredentialsProvider(FixedCredentialsProvider.create(credentials))\n              .build();\n\n            try (TranslationServiceClient client = TranslationServiceClient.create(translationServiceSettings)) {\n\n                LocationName parent = LocationName.of(projectId, \"global\");\n\n                String targetLanguage = (String)exchange.getProperty(\"outputDialect\");\n\t\t\t\t\t\t\t\t\n                if (targetLanguage == null) {\n                    exchange.getIn().setHeader(\"CamelHttpResponseCode\", \"400\");\n                    exchange.getIn().setBody(\"Target language not specified in request\");\n                }\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t  final String inputLang = (String)exchange.getProperty(\"inputLang\");\n\t\t\t\t\t\t\t\tif (targetLanguage == null || targetLanguage.equalsIgnoreCase(inputLang)) {\n\t\t\t\t\t\t\t\t\tHashMap<String, String> resp = new HashMap<String, String>() {{\n\t\t\t\t\t\t\t\t\t\tput(\"error\", \"Invalid or missing inputs.\");\n\t\t\t\t\t\t\t\t\t}};\n\t\t\t\t\t\t\t\t\texchange.getIn().setHeader(\"CamelHttpResponseCode\", 400);\n\t\t\t\t\t\t\t\t\texchange.getIn().setBody(resp);\n\t\t\t\t\t\t\t\t\treturn;\t\t\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tString inputText = (String)exchange.getIn().getBody();\n\t\t\t\t\t\t\t  HashMap<String, Object> responseMap = new HashMap<String, Object>()\t\t\t\t\t\t\t  {{\n                            put(\"provider\", \"google\");\n                            put(\"input_dialect\", inputLang);\n                            put(\"output_dialect\", targetLanguage);\n\t\t\t\t\t\t\t\t\t\t\t      put(\"input_text\", inputText);\n                }};\n\t\t\t\t\t\t\t\n                // Supported Mime Types: https://cloud.google.com/translate/docs/supported-formats\n\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t  TranslateTextRequest.Builder request = TranslateTextRequest.newBuilder()\n                    .setParent(parent.toString())\n                    .setMimeType(\"text/plain\")\n                    .setTargetLanguageCode(targetLanguage)\n\t\t\t\t\t\t\t\t\t\t.addContents(inputText);  \n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t  if (inputLang != null)\n\t\t\t\t\t\t\t\t\trequest = request.setSourceLanguageCode(inputLang);\n                    \n                TranslateTextResponse response = client.translateText(request.build());\n                List<Translation> translationList = response.getTranslationsList();\n                //exchange.setProperty(\"translationResults\", translationList);\n                if (translationList.size() == 0) {\n                    exchange.getIn().setHeader(\"CamelHttpResponseCode\", 404);\n                    return;\n                }\n\t\n\t\t\t\t\t\t\t\texchange.getIn().setHeader(\"CamelHttpResponseCode\", 200);\n            \n                for (Translation tResponse : translationList) {\n\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t  String translatedText = tResponse.getTranslatedText();\n\t\t\t\t\t\t\t\t\t\tif (inputText.equals(translatedText) || translatedText == \"\"){\n\t\t\t\t\t\t\t\t\t\t\ttranslatedText = null; \n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t  responseMap.put(\"output_text\", translatedText);\n\t\t\t\t\t\t\t\t\t   \n\t\t\t\t\t\t\t\t\t  String reverseInputLang = inputLang;\n\t\t\t\t\t\t\t\t\t\tif(inputLang == null){\n\t\t\t\t\t\t\t\t\t\t\tfinal String detectedLangCode = tResponse.getDetectedLanguageCode();\n\t\t\t\t\t\t\t\t\t  \tresponseMap.put(\"detected_dialect\", detectedLangCode);\n\t\t\t\t\t\t\t\t\t\t\treverseInputLang = detectedLangCode;\n\t\t\t\t\t\t\t\t\t\t}\n                    \n\t\t\t\t\t\t\t\t\t  final String isConfidenceEnabled = (String)exchange.getIn().getHeader(\"X-Enable-Confidence\");\n\t\t\t\t\t\t\t\t\t  if(\"true\".equals(isConfidenceEnabled) && translatedText != null){\n\t\t\t\t\t\t\t\t\t\t\trequest = TranslateTextRequest.newBuilder()\n\t\t\t\t\t\t\t\t\t\t\t.setParent(parent.toString())\n\t\t\t\t\t\t\t\t\t\t\t.setMimeType(\"text/plain\")\n\t\t\t\t\t\t\t\t\t\t\t.setTargetLanguageCode(reverseInputLang)\n\t\t\t\t\t\t\t\t\t\t\t.setSourceLanguageCode(targetLanguage)\n\t\t\t\t\t\t\t\t\t    .addContents(translatedText);\n\t\t\t\t\t\t\t\t\t\t\tresponse = client.translateText(request.build());\n\t\t\t\t\t\t\t\t\t\t\ttranslationList = response.getTranslationsList();\n\t\t\t\t\t\t\t\t\t\t\tif(translationList.size() == 0){\n\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Error in reverse translation\");\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\t\t\tfor(Translation rtResponse: translationList){\n\t\t\t\t\t\t\t\t\t\t\t\t\texchange.setProperty(\"reverseInputText\", rtResponse.getTranslatedText());\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t  \n                }\t\t\t\n\t\t\t\t\t\t\t  exchange.getIn().setBody(responseMap);\n\t\t\t\t\t\t\t\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            exchange.getIn().setBody(e.getMessage());\n            exchange.getIn().setHeader(\"CamelHttpResponseCode\", 500);\n        }\n\n    };\n}\n\n@BindToRegistry\npublic Processor getSupportedLanguagesV3beta1() {\n    return exchange -> {\n\n        URL googleCredentialUri;\n        String projectId = (String)exchange.getProperty(\"googleProjectId\");\n        GoogleCredentials credentials = null;\n        TranslationServiceSettings translationServiceSettings = null;\n\n        try {\n\t\t\t\t\t\tString credentialFile = (String)exchange.getProperty(\"credentialFile\");\n            googleCredentialUri = exchange.getContext().getClassResolver().loadResourceAsURL(credentialFile);\n            credentials = GoogleCredentials.fromStream(googleCredentialUri.openStream());\n        } catch (Exception e) {\n            System.out.println(\"Failed to read/generate credentials \" + e);\n            return;\n        }\n\n        try {\n            translationServiceSettings = TranslationServiceSettings.newBuilder()\n                .setCredentialsProvider(FixedCredentialsProvider.create(credentials))\n                .build();\n\n\n            try (TranslationServiceClient client = TranslationServiceClient.create(translationServiceSettings)) {\n                LocationName parent = LocationName.of(projectId, \"global\");\n                GetSupportedLanguagesRequest request = GetSupportedLanguagesRequest.newBuilder().setParent(parent.toString()).build();\n\n                SupportedLanguages response = client.getSupportedLanguages(request);\n                ArrayList<HashMap<String, String>> languages = new ArrayList<HashMap<String, String>>();\n                for (SupportedLanguage language : response.getLanguagesList()) {\n                    languages.add(new HashMap<String, String>() {{ put(\"code\", language.getLanguageCode()); }});\n                }\n\n                exchange.getIn().setBody(languages);\n                exchange.getIn().setHeader(\"CamelHttpResponseCode\", 200);\n            }\n        } catch (Exception e) {\n            exchange.getIn().setBody(e.getMessage());\n            exchange.getIn().setHeader(\"CamelHttpResponseCode\", 500);\n        }\n\n    };\n}",
    "importsJava" : "import org.apache.camel.BindToRegistry;\nimport org.apache.camel.Processor;\nimport org.apache.camel.CamelContext;\nimport org.apache.camel.ProducerTemplate;\nimport org.apache.camel.ExchangePattern;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.commons.codec.binary.Base64;\n\nimport java.util.*;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.io.FileInputStream;\nimport java.io.File;\n\nimport com.google.auth.oauth2.GoogleCredentials;\nimport com.google.cloud.translate.v3beta1.*;\nimport com.google.api.gax.core.FixedCredentialsProvider;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;",
    "type" : "Java"
  },
  "id" : "a22abc7a-6ac5-4bec-a3b1-d59ff1eebcd5",
  "name" : "GoogleTranslateV3Beta1",
  "description" : "",
  "createdAt" : "2023-10-04T18:05:22.410990896",
  "updatedAt" : "2023-10-04T18:05:22.410991932",
  "createdBy" : "612c1b37-217d-49f9-b344-54b8af760f6a",
  "updatedBy" : "612c1b37-217d-49f9-b344-54b8af760f6a"
}