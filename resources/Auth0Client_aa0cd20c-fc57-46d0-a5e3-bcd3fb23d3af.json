{
  "type" : "BEANS",
  "properties" : {
    "codeGroovy" : "beans {\n    myString = 'Hello World!'\n\n    myProcessor = processor { \n        it.in.body = 'Hello from Groovy'\n    }\n\n    myPredicate = predicate {\n        it.in.body != null\n    }\n}",
    "codeJava" : "@BindToRegistry\npublic Processor auth0Client() {\n    return exchange -> {\n\t\t\t\tCamelContext context = exchange.getContext();\n\t\t\t\tString clientId = (String)context.getPropertiesComponent().resolveProperty(\"convey.auth0.clientId\").get();\n        String clientSecret = (String)context.getPropertiesComponent().resolveProperty(\"convey.auth0.clientSecret\").get();\n        String auth0Domain = (String)context.getPropertiesComponent().resolveProperty(\"convey.auth0.domain\").get();\n        String auth0Audience = (String)context.getPropertiesComponent().resolveProperty(\"convey.auth0.audience\").get();\n\n        String jwtToken = (String)exchange.getIn().getHeader(\"Authorization\");\n        DecodedJWT jwt = null;\n\n        try {\n            jwt = JWT.decode(jwtToken.substring(7));\n        } catch (Exception e) {\n            exchange.getIn().setHeader(\"CamelHttpResponseCode\", 401);\n            exchange.getIn().setBody(\"Invalid JWT\");\n        }\n\n        if (jwt != null) {\n\t\t\t\t\t\tAuthAPI auth = AuthAPI.newBuilder(auth0Domain, clientId, clientSecret).build();\n\n            Request<UserInfo> request = auth.userInfo(jwt.getToken());\n            ObjectMapper mapper = new ObjectMapper();\n\n            Object responseBody;\n            int responseCode;\n\t\t\t\t\t\tResponse resp;\n\t\t\t\t\t\n            try {\n                //UserInfo info = request.execute();\n\t\t\t\t\t\t\t\tresp = request.execute();\n                //Map<String, Object> userInfo = info.getValues();\n\n                responseBody = resp.getBody(); //mapper.writeValueAsString(userInfo);\n                responseCode = resp.getStatusCode();\n\t\t\t\t\t\t\tSystem.out.println(mapper.writeValueAsString(responseBody));\n                \n            } catch (APIException exception) {\n                System.out.println(\"API Error: \" + exception.getMessage());\n\t\t\t\t\t\t\t\n                responseCode = 500;\n\t\t\t\t\t\t\t\t//if (resp != null && resp.getStatusCode() != null)\n\t\t\t\t\t\t\t\t\t//responseCode = resp.getStatusCode();\n\t\t\t\t\t\t\t\n                responseBody = exception.getMessage();\n\t\t\t\t\t\t\t\t//if (resp != null && resp.getBody() != null)\n\t\t\t\t\t\t\t\t\t//responseBody = resp.getBody();\n\t\t\t\t\t\t\t\n\n            } catch (Auth0Exception exception) {\n                System.out.println(\"Request Error: \" + exception.getMessage());\n\n                responseCode = 500;\n\t\t\t\t\t\t\t\t//if (resp != null && resp.getStatusCode() != null)\n\t\t\t\t\t\t\t\t\t//responseCode = resp.getStatusCode();\n\t\t\t\t\t\t\t\n                responseBody = exception.getMessage();\n\t\t\t\t\t\t\t\t//if (resp != null && resp.getBody() != null)\n\t\t\t\t\t\t\t\t\t//responseBody = resp.getBody();\t\t\t\t\t\t\t\n            }\n\n            exchange.getIn().setHeader(\"CamelHttpResponseCode\", responseCode);\n            exchange.getIn().setBody(responseBody);\n        }\n    };\n}",
    "importsJava" : "import org.apache.camel.CamelContext;\nimport org.apache.camel.BindToRegistry;\nimport org.apache.camel.Processor;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.commons.codec.binary.Base64;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.client.auth.AuthAPI;\nimport com.auth0.net.Request;\nimport com.auth0.json.auth.UserInfo;\nimport com.auth0.exception.*;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport com.auth0.net.Response;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport java.util.Map;",
    "type" : "Java"
  },
  "id" : "aa0cd20c-fc57-46d0-a5e3-bcd3fb23d3af",
  "name" : "Auth0Client",
  "description" : "Auth0 Java Client Interface",
  "createdAt" : "2023-10-04T18:05:19.181046597",
  "updatedAt" : "2023-10-04T18:05:19.181047912",
  "createdBy" : "612c1b37-217d-49f9-b344-54b8af760f6a",
  "updatedBy" : "612c1b37-217d-49f9-b344-54b8af760f6a"
}